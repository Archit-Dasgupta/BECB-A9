<!doctype html>
<html lang="en">
  <head>
    <!-- Set correct character encoding for the document -->
    <meta charset="UTF-8" />
    <!-- Ensure the page scales properly on mobile devices -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Browser tab title -->
    <title>Paw Smile - Local</title>

    <!-- Tailwind CSS CDN so we can use utility classes without installation -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- React & ReactDOM from public CDNs so no local setup is required -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Babel in-browser transpiler so we can write JSX directly inside this file -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>

  <!-- Apply a soft background and dark text for readability -->
  <body class="bg-[#FFF5E4] text-[#333333]">
    <!-- React will mount into this root div -->
    <div id="root"></div>

    <!-- Our entire React app lives inside this script tag -->
    <script type="text/babel">
      // Destructure useState and useEffect hooks from React
      const { useState, useEffect, useMemo } = React;

      /* ----------
         Reusable Button Components
         These keep design consistent and code tidy
      ---------- */

      // Primary (filled) button used for important actions
      const PrimaryBtn = ({ children, onClick, className = "", disabled = false }) => (
        // Tailwind classes control look & feel; disabled state dims the button
        <button
          onClick={onClick}
          disabled={disabled}
          className={
            "inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium text-white bg-[#66B266] " +
            "hover:opacity-90 transition disabled:opacity-50 " + className
          }
        >
          {children}
        </button>
      );

      // Outline button for secondary actions (e.g., Back, Learn More)
      const OutlineBtn = ({ children, onClick, className = "" }) => (
        <button
          onClick={onClick}
          className={
            "inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium border border-[#FF7B54] " +
            "text-[#FF7B54] bg-white hover:bg-[#FFF5E4] transition " + className
          }
        >
          {children}
        </button>
      );

      /* ----------
         Simple helpers for money + percent formatting
      ---------- */
      const formatINR = (n) => "₹" + n.toFixed(0);        // e.g., 499 => ₹499
      const pctOff = (price, compareAt) =>                // compute discount percent
        Math.round(((compareAt - price) / compareAt) * 100);

      /* ----------
         Demo Product Catalog
         In a real app this would come from an API
      ---------- */
      const CATALOG = [
        {
          id: 1,
          name: "Complete Dental Care Kit",
          price: 499,
          compareAt: 699,
          // small stock number to create a sense of urgency
          stock: 7,
          image: "https://placedog.net/600/420?id=201",
          badge: "Best Seller",
        },
        {
          id: 2,
          name: "Puppy Gentle Brush + Gel",
          price: 399,
          compareAt: 549,
          stock: 12,
          image: "https://placedog.net/600/420?id=202",
          badge: "New",
        },
        {
          id: 3,
          name: "Advanced Plaque Remover",
          price: 599,
          compareAt: 799,
          stock: 5,
          image: "https://placedog.net/600/420?id=203",
          badge: "Limited",
        },
      ];

      /* ----------
         Main App Component
      ---------- */
      function App() {
        // page tracks which screen to show
        const [page, setPage] = useState("landing");

        // cart stores line items as {id, qty}
        const [cart, setCart] = useState([]);

        // selected product for detail page (defaults to first)
        const [activeId, setActiveId] = useState(CATALOG[0].id);

        // countdownSeconds controls the promo banner timer (e.g., 2 hours)
        const [countdownSeconds, setCountdownSeconds] = useState(2 * 60 * 60);

        // coupon code state (you can expand logic later)
        const [coupon, setCoupon] = useState("SMILE15");
        const [couponApplied, setCouponApplied] = useState(false);

        // free shipping threshold (nudging: spend X to get free shipping)
        const FREE_SHIPPING_AT = 999;

        // compute derived cart quantities and totals using useMemo for performance
        const cartCount = useMemo(
          () => cart.reduce((sum, line) => sum + line.qty, 0),
          [cart]
        );
        const cartSubtotal = useMemo(() => {
          // sum price * qty for items in cart
          return cart.reduce((sum, line) => {
            const p = CATALOG.find(x => x.id === line.id);
            return sum + (p ? p.price * line.qty : 0);
          }, 0);
        }, [cart]);
        const discountValue = useMemo(() => {
          // simple 15% off when coupon is applied
          return couponApplied ? Math.round(cartSubtotal * 0.15) : 0;
        }, [cartSubtotal, couponApplied]);
        const cartTotal = Math.max(cartSubtotal - discountValue, 0);

        // derive remaining amount for free shipping (nudging copy)
        const freeShipGap = Math.max(FREE_SHIPPING_AT - cartTotal, 0);

        // decrement the countdown timer every second
        useEffect(() => {
          const t = setInterval(() => setCountdownSeconds(s => Math.max(s - 1, 0)), 1000);
          return () => clearInterval(t);
        }, []);

        // format countdown hh:mm:ss for the promo bar
        const timeLeft = useMemo(() => {
          const h = String(Math.floor(countdownSeconds / 3600)).padStart(2, "0");
          const m = String(Math.floor((countdownSeconds % 3600) / 60)).padStart(2, "0");
          const s = String(countdownSeconds % 60).padStart(2, "0");
          return `${h}:${m}:${s}`;
        }, [countdownSeconds]);

        /* ----------
           Cart Manipulation Helpers
        ---------- */
        const addToCart = (id, qty = 1) => {
          setCart((prev) => {
            const existing = prev.find(l => l.id === id);
            if (existing) {
              // increase qty if already in cart
              return prev.map(l => l.id === id ? { ...l, qty: l.qty + qty } : l);
            }
            // else push new line item
            return [...prev, { id, qty }];
          });
        };

        const updateQty = (id, qty) => {
          // remove if qty <= 0
          if (qty <= 0) setCart(prev => prev.filter(l => l.id !== id));
          else setCart(prev => prev.map(l => l.id === id ? { ...l, qty } : l));
        };

        const clearCart = () => setCart([]);

        // find the active product by id
        const activeProduct = CATALOG.find(p => p.id === activeId) || CATALOG[0];

        /* ----------
           Small UI helpers
        ---------- */
        const NavButton = ({ label, goto }) => (
          <button onClick={() => setPage(goto)} className="hover:opacity-90">{label}</button>
        );

        // Mini Cart Drawer (right side) — simple inline panel
        const [drawerOpen, setDrawerOpen] = useState(false);

        return (
          // The whole app area
          <div className="min-h-screen">
            {/* Top promo bar with countdown (nudge: urgency + coupon) */}
            <div className="w-full bg-[#222] text-white text-center text-sm py-2">
              {/* Show remaining time and coupon code */}
              <span className="font-semibold">Flash Sale</span>: Extra 15% off with code <span className="font-mono bg-white text-black px-1 rounded">SMILE15</span> — Ends in {timeLeft}
            </div>

            {/* Sticky nav so actions are always accessible */}
            <header className="sticky top-0 z-50 w-full bg-[#FF7B54] text-white shadow">
              <div className="mx-auto max-w-6xl px-6 py-4 flex items-center justify-between">
                {/* Brand updated to Paw Smile */}
                <h1 className="text-xl md:text-2xl font-extrabold tracking-tight">Paw Smile Dental</h1>

                {/* Basic nav */}
                <nav className="flex items-center gap-5 text-sm md:text-base">
                  <NavButton label="Home" goto="landing" />
                  <NavButton label="About Us" goto="about" />
                  <NavButton label="Shop" goto="shop" />
                </nav>

                {/* Cart button with badge showing item count */}
                <button
                  onClick={() => setDrawerOpen(true)}
                  className="relative rounded-xl bg-white/10 px-4 py-2 hover:bg-white/20 transition text-sm md:text-base"
                >
                  Cart
                  {/* Badge only if there are items */}
                  {cartCount > 0 && (
                    <span className="absolute -top-2 -right-2 text-xs bg-white text-[#FF7B54] font-bold rounded-full w-6 h-6 inline-flex items-center justify-center">
                      {cartCount}
                    </span>
                  )}
                </button>
              </div>
            </header>

            {/* Slide-over mini cart drawer (simple absolute panel) */}
            {drawerOpen && (
              <div className="fixed inset-0 z-50">
                {/* background overlay to close drawer on click */}
                <div className="absolute inset-0 bg-black/40" onClick={() => setDrawerOpen(false)}></div>

                {/* Drawer panel */}
                <aside className="absolute right-0 top-0 h-full w-[92%] sm:w-[420px] bg-white shadow-2xl p-5 space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-bold text-[#FF7B54]">Your Cart</h3>
                    <button className="text-gray-500 hover:text-black" onClick={() => setDrawerOpen(false)}>✕</button>
                  </div>

                  {/* Progress bar nudge for free shipping */}
                  <div className="rounded-xl border p-3 text-sm">
                    {freeShipGap > 0 ? (
                      <>
                        <div className="mb-2">Add {formatINR(freeShipGap)} more for <span className="font-semibold">FREE Shipping</span></div>
                        <div className="w-full h-2 bg-gray-200 rounded">
                          <div
                            className="h-2 bg-[#66B266] rounded"
                            style={{ width: Math.min((cartTotal / FREE_SHIPPING_AT) * 100, 100) + "%" }}
                          ></div>
                        </div>
                      </>
                    ) : (
                      <div className="text-[#66B266] font-medium">🎉 You unlocked FREE shipping!</div>
                    )}
                  </div>

                  {/* Line items list */}
                  <div className="space-y-3 max-h-[45vh] overflow-auto pr-1">
                    {cart.length === 0 && <div className="text-sm text-gray-500">Your cart is empty.</div>}
                    {cart.map((line) => {
                      const p = CATALOG.find(x => x.id === line.id);
                      if (!p) return null;
                      return (
                        <div key={p.id} className="flex items-center gap-3 border rounded-xl p-2">
                          <img src={p.image} alt={p.name} className="w-16 h-16 object-cover rounded-lg" />
                          <div className="flex-1">
                            <div className="font-medium">{p.name}</div>
                            <div className="text-sm">{formatINR(p.price)} ×
                              <input
                                type="number"
                                min="0"
                                value={line.qty}
                                onChange={(e) => updateQty(p.id, parseInt(e.target.value || 0, 10))}
                                className="w-14 ml-2 border rounded px-1 py-0.5 text-center"
                              />
                            </div>
                          </div>
                          <div className="font-semibold">{formatINR(p.price * line.qty)}</div>
                        </div>
                      );
                    })}
                  </div>

                  {/* Coupon apply area */}
                  <div className="flex items-center gap-2">
                    <input
                      value={coupon}
                      onChange={(e) => setCoupon(e.target.value.toUpperCase())}
                      className="flex-1 border rounded-xl px-3 py-2 text-sm"
                      placeholder="Coupon code"
                    />
                    <PrimaryBtn
                      onClick={() => setCouponApplied(coupon.trim() === "SMILE15")}
                      className="text-sm"
                    >
                      Apply
                    </PrimaryBtn>
                  </div>
                  {couponApplied ? (
                    <div className="text-sm text-[#66B266]">✅ Coupon applied: -{formatINR(discountValue)}</div>
                  ) : (
                    <div className="text-sm text-gray-500">Tip: Use <span className="font-mono">SMILE15</span> for 15% off</div>
                  )}

                  {/* Cart totals */}
                  <div className="border rounded-xl p-3 text-sm space-y-1">
                    <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                    <div className="flex justify-between"><span>Discount</span><span>-{formatINR(discountValue)}</span></div>
                    <div className="flex justify-between font-semibold"><span>Total</span><span>{formatINR(cartTotal)}</span></div>
                  </div>

                  {/* Checkout actions */}
                  <div className="flex gap-2">
                    <OutlineBtn onClick={clearCart} className="flex-1">Clear Cart</OutlineBtn>
                    <PrimaryBtn
                      onClick={() => {
                        setDrawerOpen(false);
                        if (cart.length > 0) setPage("address");
                      }}
                      className="flex-1"
                      disabled={cart.length === 0}
                    >
                      Checkout
                    </PrimaryBtn>
                  </div>
                </aside>
              </div>
            )}

            {/* Main page content wrapper */}
            <main className="mx-auto max-w-6xl px-6 py-8 space-y-8">

              {/* Landing Page (Home) */}
              {page === "landing" && (
                <div className="space-y-8">

                  {/* Hero section with social proof chips */}
                  <section className="grid grid-cols-1 md:grid-cols-2 gap-6 items-center bg-white rounded-2xl shadow-lg p-6">
                    {/* Text column */}
                    <div>
                      <h2 className="text-3xl md:text-4xl font-extrabold text-[#FF7B54] leading-tight">
                        Healthy Teeth. Happy Dogs.
                      </h2>
                      <p className="mt-3 text-lg">
                        Vet-approved dental kits for wag-worthy smiles. Easy. Safe. Loved by pets & parents.
                      </p>
                      {/* Primary CTA goes to the shop; secondary to About */}
                      <div className="mt-5 flex gap-3">
                        <PrimaryBtn onClick={() => setPage("shop")}>Shop Now</PrimaryBtn>
                        <OutlineBtn onClick={() => setPage("about")}>Learn More</OutlineBtn>
                      </div>
                      {/* Social proof chips increase trust */}
                      <div className="mt-6 flex flex-wrap items-center gap-4 text-sm">
                        <span className="inline-flex items-center gap-2 bg-[#FFF5E4] px-3 py-1 rounded-full border">⭐ 4.8/5 by 1,200+ pet parents</span>
                        <span className="inline-flex items-center gap-2 bg-[#FFF5E4] px-3 py-1 rounded-full border">✅ Vet Recommended</span>
                        <span className="inline-flex items-center gap-2 bg-[#FFF5E4] px-3 py-1 rounded-full border">🔁 30-day money-back</span>
                      </div>
                    </div>

                    {/* Image column with sales badge */}
                    <div className="relative">
                      <img src="https://placedog.net/900/650?id=101" alt="Happy dog hero" className="w-full h-auto rounded-2xl shadow-xl object-cover" />
                      <div className="absolute -bottom-3 -right-3 bg-[#66B266] text-white text-sm px-3 py-1 rounded-lg shadow">10,000+ kits sold</div>
                    </div>
                  </section>

                  {/* Benefits section: 3 cards */}
                  <section className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {[
                      { title: "Vet Recommended", img: "https://placedog.net/400/300?id=111" },
                      { title: "Safe & Natural",   img: "https://placedog.net/400/300?id=112" },
                      { title: "Easy to Use",      img: "https://placedog.net/400/300?id=113" },
                    ].map(b => (
                      <div key={b.title} className="bg-white rounded-2xl shadow p-4">
                        <img src={b.img} alt={b.title} className="w-full h-40 object-cover rounded-xl mb-3" />
                        <h3 className="font-semibold">{b.title}</h3>
                      </div>
                    ))}
                  </section>

                  {/* Social Proof gallery */}
                  <section className="bg-white rounded-2xl shadow p-6">
                    <h3 className="text-xl font-bold text-[#FF7B54] mb-4">Loved by Pet Parents</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {[121, 122, 123].map(id => (
                        <figure key={id} className="text-center">
                          <img src={"https://placedog.net/500/340?id=" + id} alt="Customer dog" className="w-full h-44 object-cover rounded-xl shadow" />
                          <figcaption className="text-sm mt-2">“Bella’s breath is so much fresher now!”</figcaption>
                        </figure>
                      ))}
                    </div>
                  </section>
                </div>
              )}

              {/* About Page */}
              {page === "about" && (
                <section className="space-y-6">
                  <div className="bg-white rounded-2xl shadow p-6">
                    <img src="https://placedog.net/1200/380?id=140" alt="About cover" className="w-full h-56 object-cover rounded-xl mb-4" />
                    <h2 className="text-2xl font-bold text-[#FF7B54] mb-2">Our Story</h2>
                    <p>We’re pet parents first. Our mission is to prevent dental disease in dogs with easy-to-use, safe, and effective kits. Every purchase supports dog shelters across India.</p>
                  </div>
                </section>
              )}

              {/* Shop / Catalog Page */}
              {page === "shop" && (
                <section className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Map over our CATALOG to render product cards */}
                  {CATALOG.map(p => (
                    <div key={p.id} className="bg-white rounded-2xl shadow hover:shadow-lg transition p-4">
                      {/* Product image */}
                      <div className="relative">
                        <img src={p.image} alt={p.name} className="w-full h-44 object-cover rounded-xl mb-3" />
                        {/* Small badge at the top-left (e.g., Best Seller) */}
                        <span className="absolute top-2 left-2 text-xs bg-[#FF7B54] text-white px-2 py-1 rounded-lg">{p.badge}</span>
                        {/* Discount badge at the top-right */}
                        <span className="absolute top-2 right-2 text-xs bg-[#66B266] text-white px-2 py-1 rounded-lg">-{pctOff(p.price, p.compareAt)}%</span>
                      </div>

                      {/* Name + Pricing */}
                      <div className="flex items-start justify-between gap-2">
                        <div>
                          <h3 className="font-semibold leading-tight">{p.name}</h3>
                          <div className="text-sm text-gray-600">
                            <span className="font-semibold">{formatINR(p.price)}</span>{" "}
                            <span className="line-through text-gray-400">{formatINR(p.compareAt)}</span>
                          </div>
                          {/* Scarcity nudge */}
                          <div className="text-xs text-amber-700 mt-1">Only {p.stock} left</div>
                        </div>
                      </div>

                      {/* Actions: Add to Cart + Buy Now + View */}
                      <div className="mt-3 flex gap-2">
                        <PrimaryBtn onClick={() => addToCart(p.id)} className="flex-1">Add to Cart</PrimaryBtn>
                        <OutlineBtn onClick={() => { setActiveId(p.id); setPage("detail"); }} className="px-3">View</OutlineBtn>
                      </div>
                      <PrimaryBtn
                        onClick={() => { addToCart(p.id); setPage("address"); }}
                        className="mt-2 w-full"
                      >
                        Buy Now
                      </PrimaryBtn>
                    </div>
                  ))}
                </section>
              )}

              {/* Product Detail Page */}
              {page === "detail" && (
                <section className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Large product image */}
                  <img src="https://placedog.net/900/650?id=240" alt={activeProduct.name} className="w-full h-auto rounded-2xl shadow" />

                  {/* Details card */}
                  <div className="bg-white rounded-2xl shadow p-6 relative">
                    {/* Sticky mini add-to-cart bar for mobile visibility (nudging) */}
                    <div className="md:hidden sticky -top-4 -mx-6 -mt-6 p-3 bg-white/90 backdrop-blur border-b rounded-t-2xl flex items-center justify-between z-10">
                      <div className="text-sm">
                        <div className="font-semibold">{activeProduct.name}</div>
                        <div>{formatINR(activeProduct.price)} <span className="line-through text-gray-400 ml-1">{formatINR(activeProduct.compareAt)}</span></div>
                      </div>
                      <PrimaryBtn onClick={() => addToCart(activeProduct.id)}>Add</PrimaryBtn>
                    </div>

                    {/* Title */}
                    <h2 className="text-2xl font-bold text-[#FF7B54]">{activeProduct.name}</h2>

                    {/* Price row */}
                    <p className="mt-2">
                      <span className="font-semibold">{formatINR(activeProduct.price)}</span>
                      <span className="line-through text-gray-400 ml-2">{formatINR(activeProduct.compareAt)}</span>
                      <span className="ml-2 text-xs bg-[#66B266] text-white px-2 py-0.5 rounded">{pctOff(activeProduct.price, activeProduct.compareAt)}% OFF</span>
                    </p>

                    {/* Short description */}
                    <p className="mt-3">Everything you need to keep your dog’s teeth clean and healthy.</p>

                    {/* Add to Cart + Buy Now */}
                    <div className="mt-4 flex gap-3">
                      <PrimaryBtn onClick={() => addToCart(activeProduct.id)}>Add to Cart</PrimaryBtn>
                      <PrimaryBtn onClick={() => { addToCart(activeProduct.id); setPage("address"); }}>Buy Now</PrimaryBtn>
                      <OutlineBtn onClick={() => setPage("shop")}>Back</OutlineBtn>
                    </div>

                    {/* Tabs mockup */}
                    <div className="mt-6 grid grid-cols-3 text-sm">
                      <div className="border-b-2 border-[#FF7B54] pb-2 font-semibold">Description</div>
                      <div className="border-b pb-2 text-gray-500">Ingredients</div>
                      <div className="border-b pb-2 text-gray-500">Reviews</div>
                    </div>
                    <p className="mt-3 text-sm">Starter kit with brush, gel, and tutorial. Gentle on gums, effective on plaque.</p>

                    {/* Trust & safety badges */}
                    <div className="mt-5 grid grid-cols-2 gap-3 text-xs">
                      <div className="border rounded-xl p-3">🔒 Secure checkout (Razorpay/UPI/Cards)</div>
                      <div className="border rounded-xl p-3">🚚 Free shipping over {formatINR(FREE_SHIPPING_AT)}</div>
                      <div className="border rounded-xl p-3">🧪 Vet-tested & safe</div>
                      <div className="border rounded-xl p-3">↩️ 30-day returns</div>
                    </div>
                  </div>
                </section>
              )}

              {/* Address / Delivery Details */}
              {page === "address" && (
                <section className="max-w-md mx-auto bg-white rounded-2xl shadow p-6">
                  <h2 className="text-xl font-bold text-[#FF7B54]">Delivery Details</h2>

                  {/* Free shipping nudge message persists */}
                  <div className="text-xs mt-1 text-gray-600">Tip: Add more items and apply SMILE15 at checkout to save more.</div>

                  <div className="mt-4 space-y-3">
                    <input className="w-full rounded-xl border px-3 py-2" placeholder="Full Name" />
                    <input className="w-full rounded-xl border px-3 py-2" placeholder="Mobile Number" />
                    <input className="w-full rounded-xl border px-3 py-2" placeholder="Address" />
                    <div className="grid grid-cols-2 gap-3">
                      <input className="rounded-xl border px-3 py-2" placeholder="City" />
                      <input className="rounded-xl border px-3 py-2" placeholder="Pin Code" />
                    </div>

                    {/* Summary box shows totals again (redundant on purpose for reassurance) */}
                    <div className="border rounded-xl p-3 text-sm space-y-1">
                      <div className="flex justify-between"><span>Items</span><span>{cartCount}</span></div>
                      <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                      <div className="flex justify-between"><span>Discount (if coupon)</span><span>-{formatINR(discountValue)}</span></div>
                      <div className="flex justify-between font-semibold"><span>To Pay</span><span>{formatINR(cartTotal)}</span></div>
                    </div>

                    <PrimaryBtn onClick={() => setPage("payment")}>Proceed to Payment</PrimaryBtn>
                  </div>
                </section>
              )}

              {/* Payment Page */}
              {page === "payment" && (
                <section className="max-w-md mx-auto bg-white rounded-2xl shadow p-6">
                  <div className="mb-4 text-sm">
                    <span className="font-medium">Address</span> →{" "}
                    <span className="font-bold text-[#FF7B54]">Payment</span> →{" "}
                    <span className="text-gray-400">Thank You</span>
                  </div>

                  {/* Payment illustration */}
                  <img src="https://placedog.net/500/200?id=260" alt="Payment visual" className="w-full h-32 object-cover rounded-xl mb-3" />

                  {/* Order summary */}
                  <p className="mb-2">Order Total: <span className="font-semibold">{formatINR(cartTotal)}</span></p>
                  <p className="mb-4 text-sm text-gray-600">Pay via UPI, Cards, NetBanking, or Cash on Delivery.</p>

                  {/* Pay now action proceeds to Thank You */}
                  <PrimaryBtn onClick={() => setPage("thankyou")}>Pay Now</PrimaryBtn>
                </section>
              )}

              {/* Thank You Page */}
              {page === "thankyou" && (
                <section className="text-center bg-white rounded-2xl shadow p-8 max-w-lg mx-auto">
                  {/* Cute dog image to celebrate purchase */}
                  <img src="https://placedog.net/500/340?id=280" alt="Thank you dog" className="mx-auto rounded-xl mb-4 shadow" />
                  <h2 className="text-2xl font-bold text-[#66B266]">Thank You!</h2>
                  <p className="mt-2">Your order has been placed successfully.</p>
                  <p className="text-sm mt-2">Estimated delivery: 3–5 days</p>
                  <div className="mt-4">
                    <OutlineBtn onClick={() => setPage("landing")}>Back to Home</OutlineBtn>
                  </div>
                </section>
              )}
            </main>
          </div>
        );
      }

      // Mount the App into the root element
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<App />);
    </script>
  </body>
</html>
