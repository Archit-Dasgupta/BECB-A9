<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Paw Smile</title>

    <!-- React + Babel (kept for easy local double-click testing) -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Tailwind CDN -->
    <script defer src="https://cdn.tailwindcss.com"></script>

    <!-- Theme / variables (no functional change) -->
    <link rel="stylesheet" href="colors.css" />
    <link rel="stylesheet" href="theme.css" />
    <style>
      /* --- Minimal, safe fix to remove horizontal scroll everywhere --- */
      html, body { max-width: 100%; overflow-x: hidden; }

      .shadow-soft { box-shadow: 0 10px 30px rgba(0,0,0,0.08); }
      .line-through-muted { text-decoration: line-through; color: #9ca3af; }
    
      .reveal { opacity: 0; transform: translateY(8px); transition: opacity .5s ease, transform .5s ease; }
      .reveal.revealed { opacity: 1; transform: translateY(0); }
    </style>
  
<style>

/* Glow + Wiggle animation */
@keyframes glowWiggle {
  0% { transform: scale(1); box-shadow: 0 0 0px #00ff99; }
  25% { transform: rotate(-5deg) scale(1.1); box-shadow: 0 0 15px #00ff99; }
  50% { transform: rotate(5deg) scale(1.1); box-shadow: 0 0 15px #00ff99; }
  75% { transform: rotate(-5deg) scale(1.05); box-shadow: 0 0 10px #00ff99; }
  100% { transform: rotate(0deg) scale(1); box-shadow: 0 0 0px transparent; }
}
.cart-animate {
  animation: glowWiggle 0.6s ease-in-out;
}
</style>


<style>
/* Force header flush to the very top */
header, .header, nav { margin-top: 0 !important; top: 0 !important; }
html, body, #root { margin: 0; padding: 0; }
</style>


    <!-- PATCH: COLLAPSIBLE SIDEBAR -->
    <style>
      /* two-col layout only when sidebarOpen */
      .shop-with-sidebar{display:grid;grid-template-columns:300px minmax(0,1fr);gap:16px;}
      @media (max-width:768px){.shop-with-sidebar{display:block;}}
      /* fixed-height filter rows (no growth on check) */
      .filter-row{border:1px solid #e5e7eb;border-radius:12px;padding:10px 12px;height:44px;display:flex;align-items:center;justify-content:space-between;background:#fff}
      .filter-row input[type="checkbox"]{width:16px;height:16px}
      /* mobile drawer */
      .drawer{transform:translateX(100%);transition:transform .3s ease}
      .drawer.open{transform:translateX(0)}
      .apply-bar{position:sticky;bottom:0;left:0;right:0;background:#fff;padding:12px;box-shadow:0 -6px 20px rgba(0,0,0,.08)}
    </style>
    <!-- /PATCH -->
    

    <!-- EQUAL CARD HEIGHTS -->
    <style>
      .clamp-1{display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden}
      .product-card{display:flex;flex-direction:column}
      .product-card .info{min-height:64px}
    </style>
    
</head>
  <body class="bg-[var(--bg)] text-[var(--text)]">
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useMemo, useEffect } = React;

      const PrimaryBtn = ({ children, onClick, className = "", disabled = false }) => (
        <button
          onClick={onClick}
          disabled={disabled}
          className={
            "inline-flex items-center justify-center rounded-lg px-3 py-2 sm:px-4 sm:py-2 font-medium text-white bg-[var(--accent)] " +
            "hover:opacity-90 transition disabled:opacity-50 " + className
          }
        >
          {children}
        </button>
      );
      const OutlineBtn = ({ children, onClick, className = "" }) => (
        <button
          onClick={onClick}
          className={
            "inline-flex items-center justify-center rounded-lg px-3 py-2 sm:px-4 sm:py-2 font-medium border border-[var(--primary)] " +
            "text-[var(--primary)] bg-white hover:bg-[var(--bg)] transition " + className
          }
        >
          {children}
        </button>
      );

      const formatINR = (n) => "₹" + n.toFixed(0);
      const pctOff = (price, compareAt) => Math.round(((compareAt - price) / compareAt) * 100);
      
      const SizeIcon = ({ t = 'S' }) => {
        const srcMap = {
          S: "img/small-dog.svg",
          M: "img/medium-dog.svg",
          L: "img/large-dog.svg",
        };
        return (
          <img
            src={srcMap[t]}
            alt={`${t} dog`}
            className="w-full h-full object-contain p-2"
          />
        );
      };

      

      // Simple funnel icon used for Filters (desktop + mobile)
      const FilterIcon = ({ className = "w-4 h-4" }) => (
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
             fill="none" stroke="currentColor" strokeWidth="2"
             className={className}>
          <path d="M3 6h18M6 12h12M10 18h4" strokeLinecap="round" strokeLinejoin="round"></path>
        </svg>
      );

      // Circular dog size control used on both mobile and desktop
      
      const SizeCircle = ({ code, label, active, onClick }) => (
        <button onClick={onClick}
                className={
                  "flex flex-col items-center w-16 " +
                  (active ? "text-[var(--primary)]" : "text-gray-700")
                }>
          <span className={
                "w-14 h-14 rounded-full border flex items-center justify-center transition-colors " +
                (active ? "bg-[var(--primary)]/20 border-2 border-[var(--primary)]" : "bg-white border border-gray-300")
              }>
            {code === 'ALL' ? (
              <span className={"text-xs font-semibold " + (active ? "" : "text-gray-700")}>All</span>
            ) : (
              <SizeIcon t={code} />
            )}
          </span>
          <span className="mt-1 text-xs">{label}</span>
        </button>
      );
        

    const CATALOG = [
        { id: 1, name: "Paw Smile's Complete Dog Dental Kit", type: "Dental Kit", price: 799, compareAt: 999, stock: 7,  image: "img/product1.png", badge: "Previously Bought" , sizes: ['S','M','L'], rating: 4.8, eta: "2–3 days" },
        { id: 2, name: "Paw Smile's Small Dogs & Puppy Gentle Brush", type: "Brush", price: 399, compareAt: 549, stock: 12, image: "img/product2.png", badge: "Best Seller", sizes: ['S','M'], rating: 4.7, eta: "2–4 days" },
        { id: 3, name: "Paw Smile's Gentle Dog Plaque Remover",  type: "Strips", price: 599, compareAt: 799, stock: 5,  image: "img/product6.png", badge: "New" , sizes: ['M','L'], rating: 4.9, eta: "2–3 days" },
        { id: 4, name: "Paw Smile Dog Chew Toy Tooth Cleaner", type: "Chew Toy", price: 699, compareAt: 899, stock: 20, image: "img/product3.png", badge: "Popular", sizes: ['S','M'], rating: 4.5, eta: "3–5 days" },
        { id: 5, name: "Paw Smile's Dog Breath Spray - Mint", type: "Others", price: 299, compareAt: 399, stock: 15, image: "img/product4.png", badge: "Best Seller", sizes: ['S','M','L'], rating: 4.6, eta: "2–4 days" },
        { id: 6, name: "Paw Smile Dog Dental Wipes - 50 wipes", type: "Others", price: 199, compareAt: 449, stock: 25, image: "img/product5.png", badge: "New", sizes: ['S','L'], rating: 4.4, eta: "3–5 days" },
        { id: 7, name: "Paw Smile Special Dog Toothpaste", type: "Strips", price: 299, compareAt: 549, stock: 25, image: "img/product7.png", badge: "New", sizes: ['L'], rating: 4.2, eta: "3–5 days" },
        { id: 8, name: "Paw Smile dental water additive", type: "Others", price: 499, compareAt: 649, stock: 25, image: "img/product8.png", badge: "New", sizes: ['M'], rating: 3.9, eta: "3–5 days" },
      ];

      function App() {
        const [page, setPage] = useState("landing");
        const [history, setHistory] = useState([]);
        
        const navigate = (next) => {
          setHistory((h) => (page === next ? h : [...h, page]));
          setPage(next);
          window.scrollTo?.({ top: 0, behavior: "smooth" });
        };
        const canGoBack = history.length > 0;
        const goBack = () => {
          setHistory((h) => {
            if (!h.length) return h;
            const prev = h[h.length - 1];
            setPage(prev);
            window.scrollTo?.({ top: 0, behavior: "smooth" });
            return h.slice(0, -1);
          });
        };

        const [cart, setCart] = useState([]);
        const [activeId, setActiveId] = useState(CATALOG[0].id);

        const [countdownSeconds, setCountdownSeconds] = useState(2 * 60 * 60);
        useEffect(() => {
          const t = setInterval(() => setCountdownSeconds(s => Math.max(s - 1, 0)), 1000);
          return () => clearInterval(t);
        }, []);
        const timeLeft = useMemo(() => {
          const h = String(Math.floor(countdownSeconds / 3600)).padStart(2, "0");
          const m = String(Math.floor((countdownSeconds % 3600) / 60)).padStart(2, "0");
          const s = String(countdownSeconds % 60).padStart(2, "0");
          return `${h}:${m}:${s}`;
        }, [countdownSeconds]);

        const [coupon, setCoupon] = useState("SMILE15");
        const [couponApplied, setCouponApplied] = useState(false);
        const FREE_SHIPPING_AT = 999;

        const cartCount = useMemo(() => cart.reduce((sum, l) => sum + l.qty, 0), [cart]);
        const cartSubtotal = useMemo(() => cart.reduce((sum, l) => {
          const p = CATALOG.find(x => x.id === l.id);
          return sum + (p ? p.price * l.qty : 0);
        }, 0), [cart]);
        const discountValue = useMemo(() => couponApplied ? Math.round(cartSubtotal * 0.15) : 0, [cartSubtotal, couponApplied]);
        const cartTotal = Math.max(cartSubtotal - discountValue, 0);
        const freeShipGap = Math.max(FREE_SHIPPING_AT - cartTotal, 0);

        const [drawerOpen, setDrawerOpen] = useState(false);

        // Size filter state for Shop
        const [sizeFilter, setSizeFilter] = useState('ALL'); // ALL | S | M | L
        const [sizeHelpOpen, setSizeHelpOpen] = useState(false);
        // desktop collapsible sidebar
        const [sidebarOpen, setSidebarOpen] = useState(false);
    
        // base filters
        const prices = useMemo(() => CATALOG.map(p => p.price), []);
        const minP = Math.min(...prices);
        const maxP = Math.max(...prices);
        const [priceCap, setPriceCap] = useState(maxP);
        const [typesSelected, setTypesSelected] = useState({All:true, Brush:false, Strips:false, 'Dental Kit':false, 'Chew Toy':false, Others:false});
        const [sizesSelected, setSizesSelected] = useState({S:false, M:false, L:false});
        const [fastDeliveryOnly, setFastDeliveryOnly] = useState(false);
        const [sort, setSort] = useState('POPULAR');
        const [filtersOpen, setFiltersOpen] = useState(false); // mobile drawer
        

        const addToCart = (id, qty = 1) => {
          setCart(prev => {
            const line = prev.find(l => l.id === id);
            return line ? prev.map(l => l.id === id ? { ...l, qty: l.qty + qty } : l) : [...prev, { id, qty }];
          });
        
          // 🔔 Trigger cart button animation
          const btn = document.querySelector("#cart-btn");
          if (btn) {
            btn.classList.add("cart-animate");
            setTimeout(() => btn.classList.remove("cart-animate"), 650);
          }
        };
        const updateQty = (id, qty) => {
          if (qty <= 0) setCart(prev => prev.filter(l => l.id !== id));
          else setCart(prev => prev.map(l => l.id === id ? { ...l, qty } : l));
        };

        const activeProduct = CATALOG.find(p => p.id === activeId) || CATALOG[0];
        const shopProducts = useMemo(() => {
          let base = sizeFilter === 'ALL' ? CATALOG : CATALOG.filter(p => (p.sizes || []).includes(sizeFilter));
          const pickedTypes = Object.entries(typesSelected).filter(([k,v])=>v && k!=='All').map(([k])=>k);
          if (!(typesSelected.All) && pickedTypes.length>0) base = base.filter(p => pickedTypes.includes(p.type||''));
          const pickedSizes = Object.entries(sizesSelected).filter(([,v])=>v).map(([k])=>k);
          if (pickedSizes.length>0) base = base.filter(p => (p.sizes||[]).some(s => pickedSizes.includes(s)));
          base = base.filter(p => p.price <= priceCap);
          if (fastDeliveryOnly) base = base.filter(p => {
            const nums = (p.eta||'').match(/\d+/g) || [];
            const max = nums.map(n=>+n).reduce((a,b)=>Math.max(a,b), 0);
            return max>0 ? max <= 3 : true;
          });
          const arr = [...base];
          if (sort === 'PRICE_LOW') arr.sort((a,b)=>a.price-b.price);
          if (sort === 'PRICE_HIGH') arr.sort((a,b)=>b.price-a.price);
          if (sort === 'NEW') arr.sort((a,b)=>(b.badge==='New') - (a.badge==='New'));
          return arr;
        }, [sizeFilter, typesSelected, sizesSelected, priceCap, fastDeliveryOnly, sort]);

        // ---------- Testimonials carousel state ----------
        const TESTIMONIALS = [
          { name: "Aisha & Bruno", text: "Bruno actually lets me brush now. The gel smells good and no more bad breath!", rating: 5 },
          { name: "Rahul & Coco", text: "Easy routine, noticeable difference in 2 weeks. Great value for money.", rating: 5 },
          { name: "Meera & Simba", text: "Vet recommended this. The brush is soft and Coco loves the taste.", rating: 4 },
        ];
        const [tIndex, setTIndex] = useState(0);
        const nextT = () => setTIndex(i => (i + 1) % TESTIMONIALS.length);
        const prevT = () => setTIndex(i => (i - 1 + TESTIMONIALS.length) % TESTIMONIALS.length);
        useEffect(() => {
          const id = setInterval(nextT, 6500);
          return () => clearInterval(id);
        }, []);

        // ---------- Mobile Best Sellers carousel (1 row with arrows; auto every 20s) ----------
        const BS_ITEMS = CATALOG.slice(0, 4);
        const BS_PER_SLIDE = 2; // show 2 cards per row on mobile
        const BS_SLIDES = Math.ceil(BS_ITEMS.length / BS_PER_SLIDE);
        const [bsIndex, setBsIndex] = useState(0);
        const prevBS = () => setBsIndex(i => (i - 1 + BS_SLIDES) % BS_SLIDES);
        const nextBS = () => setBsIndex(i => (i + 1) % BS_SLIDES);
        useEffect(() => {
          const id = setInterval(nextBS, 20000); // auto-change every 20s
          return () => clearInterval(id);
        }, []);

        // Minimal reveal-on-scroll
        useEffect(() => {
          const els = document.querySelectorAll('.reveal');
          const io = new IntersectionObserver((entries) => {
            entries.forEach((e) => {
              if (e.isIntersecting) {
                e.target.classList.add('revealed');
                io.unobserve(e.target);
              }
            });
          }, { threshold: 0.1 });
          els.forEach((el) => io.observe(el));
          return () => io.disconnect();
        }, [page]);

        // ---------- Search state ----------
        const [searchOpen, setSearchOpen] = useState(false);
        const [searchQuery, setSearchQuery] = useState("");
        const filteredProducts = useMemo(
          () =>
            CATALOG.filter(p =>
              p.name.toLowerCase().includes(searchQuery.trim().toLowerCase())
            ),
          [searchQuery]
        );

        // ---------- Payment method state (visual only) ----------
        const [payMethod, setPayMethod] = useState("UPI");

        const qtyInCart = (id) => cart.find(l => l.id === id)?.qty || 0;

        return (
          <div className="min-h-screen">
            {/* STICKY WRAPPER: promo bar + header stick together */}
            <div>
              <header className="fixed top-0 left-0 right-0 z-50 w-full bg-[var(--primary)] text-white shadow">
                <div className="mx-auto max-w-screen-xl px-4 sm:px-6 py-3 sm:py-4 flex items-center justify-between gap-3">
                  
                  {/* Left: Back button when not on Home; Logo on Home */}
                  <div className="shrink-0">
                    {canGoBack ? (
                      <button
                        onClick={goBack}
                        className="inline-flex items-center gap-2 rounded-lg bg-white/10 hover:bg-white/20 px-2.5 py-2"
                        aria-label="Go back"
                        title="Go back"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2" className="w-5 h-5">
                          <path d="M15 18l-6-6 6-6" strokeLinecap="round" strokeLinejoin="round"></path>
                        </svg>
                        <span className="text-sm hidden xs:inline">Back</span>
                      </button>
                    ) : (
                      <button
                        onClick={() => { navigate('landing'); }}
                        className="flex items-center gap-2 group"
                        aria-label="Go to Home"
                        title="Paw Smile Dental — Home"
                      >
                        <svg width="150" height="34" viewBox="0 0 320 72" fill="none" xmlns="http://www.w3.org/2000/svg" className="transition transform group-hover:scale-[1.02]">
                          <defs>
                            <linearGradient id="grad" x1="0" y1="0" x2="1" y2="1">
                              <stop offset="0%" stopColor="#ffffff" stopOpacity="1"/>
                              <stop offset="100%" stopColor="#dbeafe" stopOpacity="1"/>
                            </linearGradient>
                          </defs>
                          <g>
                            <circle cx="28" cy="30" r="10" fill="url(#grad)"/>
                            <circle cx="18" cy="18" r="5" fill="#ffffff" opacity="0.9"/>
                            <circle cx="28" cy="14" r="5" fill="#ffffff" opacity="0.9"/>
                            <circle cx="38" cy="18" r="5" fill="#ffffff" opacity="0.9"/>
                            <path d="M22 36c6-2 16-2 22 0 2 6-2 12-6 12-3 0-5-3-5-6 0 3-2 6-5 6-4 0-8-6-6-12z" fill="#ffffff"/>
                          </g>
                          <text x="68" y="44" font-family="Segoe UI, system-ui, -apple-system, Roboto, Helvetica, Arial, sans-serif" font-weight="800" font-size="28" fill="#ffffff" letter-spacing="0.5">Paw Smile</text>
                        </svg>
                      </button>
                    )}
                  </div>

                  {/* Center nav overlay — compact pill */}
                  <div className="hidden sm:flex absolute inset-0 z-10 pointer-events-none items-center">
                    <nav
                      className="pointer-events-auto mx-auto w-fit
                                flex items-center gap-2 rounded-full
                                bg-white/10 backdrop-blur px-3 py-1"
                    >
                      <button onClick={() => navigate('landing')} className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Home</button>
                      <button onClick={() => navigate('about')}   className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">About Us</button>
                      <button onClick={() => navigate('shop')}    className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Shop</button>
                      <button onClick={() => navigate('about')}   className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Contact</button>
                    </nav>
                  </div>


                  {/* Right: Desktop search + cart / Mobile actions */}
                  <div className="shrink-0 flex items-center justify-end gap-2">
                    {/* Desktop search */}
                    <div className="hidden md:flex items-center rounded-full bg-white/15 border border-white/20 px-3 py-1.5">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" className="opacity-80">
                        <path d="M21 21l-4.3-4.3m1.8-4.7a7 7 0 11-14 0 7 7 0 0114 0z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                      <input
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        placeholder="Search dog dental kits…"
                        className="bg-transparent placeholder-white/70 text-white text-sm outline-none ml-2 w-36"
                      />
                    </div>

                    {/* Mobile search icon */}
                    <button
                      onClick={() => setSearchOpen(true)}
                      className="md:hidden inline-flex items-center justify-center rounded-lg bg-white/10 hover:bg-white/20 px-2.5 py-2"
                      aria-label="Search"
                    >
                      🔎
                    </button>

                    {/* Mobile quick nav (toggle Home/Shop) */}
                    {page === 'shop' ? (
                      <button onClick={() => navigate('landing')} className="sm:hidden text-sm bg-white/10 px-3 py-1.5 rounded-lg">
                        Home
                      </button>
                    ) : (
                      <button onClick={() => navigate('shop')} className="sm:hidden text-sm bg-white/10 px-3 py-1.5 rounded-lg">
                        Shop
                      </button>
                    )}

                    {/* Cart */}
                    <button
                      id="cart-btn" onClick={() => setDrawerOpen(true)}
                      className="relative rounded-lg bg-white/10 px-3 sm:px-4 py-1.5 sm:py-2 hover:bg-white/20 transition text-sm md:text-base"
                    > Cart
                      {cartCount > 0 && (
                        <span className="absolute -top-2 -right-2 text-[10px] sm:text-xs bg-white text-[var(--primary)] font-bold rounded-full w-5 h-5 sm:w-6 sm:h-6 inline-flex items-center justify-center">
                          {cartCount}
                        </span>
                      )}
                    </button>
                  </div>
                </div>
              </header>
              {/* Spacer below header — different for landing vs other pages */}
              {page === "landing" ? (
                <>
                  {/* Mobile */}
                  <div className="block sm:hidden" style={{height: "60px"}}></div>
                  {/* Tablet/Desktop */}
                  <div className="hidden sm:block" style={{height: "60px"}}></div>
                </>
              ) : (
                <>
                  {/* Mobile */}
                  <div className="block sm:hidden" style={{height: "74px"}}></div>
                  {/* Tablet/Desktop */}
                  <div className="hidden sm:block" style={{height: "82px"}}></div>
                </>
              )}
            </div>

            {/* ---------- Mobile Search Overlay ---------- */}
            {searchOpen && (
              <div className="fixed inset-0 z-50 bg-black/50">
                <div className="absolute inset-x-0 top-0 bg-white rounded-b-2xl p-3">
                  <div className="flex items-center gap-2">
                    <input
                      autoFocus
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search dog dental kits…"
                      className="flex-1 rounded-lg border px-3 py-2 text-sm"
                    />
                    <button
                      onClick={() => { setSearchOpen(false); setSearchQuery(""); }}
                      className="px-3 py-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-sm"
                    >
                      Cancel
                    </button>
                  </div>

                  {/* Results */}
                  <div className="mt-3 max-h[60vh] overflow-auto divide-y">
                    {filteredProducts.length === 0 && (
                      <div className="py-6 text-center text-sm text-gray-500">No matches</div>
                    )}
                    {filteredProducts.map(p => (
                      <button
                        key={p.id}
                        onClick={() => {
                          setActiveId(p.id);
                          navigate('detail');
                          setSearchOpen(false);
                        }}
                        className="w-full flex items-center gap-3 py-3 hover:bg-gray-50 px-1 text-left"
                      >
                        <img src={p.image} alt={p.name} className="w-12 h-12 rounded-lg object-cover" />
                        <div className="flex-1 min-w-0">
                          <div className="font-medium truncate">{p.name}</div>
                          <div className="text-xs text-gray-600">{formatINR(p.price)}</div>
                        </div>
                        <span className="text-[10px] bg-[var(--accent)] text-white px-2 py-0.5 rounded">
                          -{pctOff(p.price, p.compareAt)}%
                        </span>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Drawer */}
            {drawerOpen && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setDrawerOpen(false)}></div>
                <aside className="absolute right-0 top-0 h-full w-[96%] xs:w-[92%] sm:w-[420px] bg-white shadow-2xl p-4 sm:p-5 space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-base sm:text-lg font-bold text-[var(--primary)]">Your Cart</h3>
                    <button className="text-gray-500 hover:text-black" onClick={() => setDrawerOpen(false)}>✕</button>
                  </div>

                  <div className="rounded-lg border p-3 text-xs sm:text-sm">
                    {Math.max(FREE_SHIPPING_AT - cartTotal, 0) > 0 ? (
                      <>
                        <div className="mb-2">Add {formatINR(Math.max(FREE_SHIPPING_AT - cartTotal, 0))} more for <span className="font-semibold">FREE Shipping</span></div>
                        <div className="w-full h-2 bg-gray-200 rounded">
                          <div className="h-2 bg-[var(--accent)] rounded" style={{ width: Math.min((cartTotal / 999) * 100, 100) + "%" }}></div>
                        </div>
                      </>
                    ) : (
                      <div className="text-[var(--accent)] font-medium">🎉 You unlocked FREE shipping!</div>
                    )}
                  </div>

                  <div className="space-y-3 max-h-[45vh] overflow-auto pr-1">
                    {cart.length === 0 && <div className="text-sm text-gray-500">Your cart is empty.</div>}
                    {cart.map(line => {
                      const p = CATALOG.find(x => x.id === line.id);
                      if (!p) return null;
                      return (
                        <div key={p.id} className="flex items-center gap-3 border rounded-lg p-2">
                          <img src={p.image} alt={p.name} width="64" height="64" loading="lazy" className="w-14 h-14 sm:w-16 sm:h-16 object-cover rounded-lg" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-sm sm:text-base truncate">{p.name}</div>
                            <div className="text-xs sm:text-sm">{formatINR(p.price)} ×
                              <input
                                type="number" min="0" value={line.qty}
                                onChange={(e) => {
                                  const v = parseInt(e.target.value || 0, 10);
                                  if (v <= 0) setCart(prev => prev.filter(l => l.id !== p.id));
                                  else setCart(prev => prev.map(l => l.id === p.id ? { ...l, qty: v } : l));
                                }}
                                className="w-12 sm:w-14 ml-2 border rounded px-1 py-0.5 text-center"
                              />
                            </div>
                          </div>
                          <div className="font-semibold text-sm sm:text-base">{formatINR(p.price * line.qty)}</div>
                        </div>
                      );
                    })}
                  </div>

                  <div className="flex items-center gap-2">
                    <input
                      value={coupon}
                      onChange={(e) => setCoupon(e.target.value.toUpperCase())}
                      className="flex-1 border rounded-lg px-3 py-2 text-sm"
                      placeholder="Coupon code"
                    />
                    <PrimaryBtn onClick={() => setCouponApplied(coupon.trim() === 'SMILE15')} className="text-sm">Apply</PrimaryBtn>
                  </div>
                  {couponApplied
                    ? <div className="text-sm text-[var(--accent)]">✅ Coupon applied: -{formatINR(Math.round(cartSubtotal * 0.15))}</div>
                    : <div className="text-sm text-gray-500">Tip: Use <span className="font-mono">SMILE15</span> for 15% off</div>}

                  <div className="border rounded-lg p-3 text-sm space-y-1">
                    <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                    <div className="flex justify-between"><span>Discount</span><span>-{formatINR(couponApplied ? Math.round(cartSubtotal * 0.15) : 0)}</span></div>
                    <div className="flex justify-between font-semibold"><span>Total</span><span>{formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}</span></div>
                  </div>

                  <div className="flex gap-2">
                    <PrimaryBtn
                      onClick={() => { setDrawerOpen(false); if (cart.length) navigate('address'); }}
                      className="flex-1"
                      disabled={cart.length === 0}
                    >
                      Checkout
                    </PrimaryBtn>
                  </div>
                </aside>
              </div>
            )}

            {/* Size Help Modal */}
            {sizeHelpOpen && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setSizeHelpOpen(false)}></div>
                <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[92%] max-w-md bg-white rounded-none shadow p-4 sm:p-6">
                  <h3 className="text-lg font-bold text-[var(--primary)] mb-1">Need help choosing a size?</h3>
                  <p className="text-sm text-gray-700 mb-3">Pick your dog’s approximate weight. We’ll show suitable products.</p>
                  <div className="grid grid-cols-1 gap-2">
                    <button onClick={() => { setSizeFilter('S'); setSizeHelpOpen(false); }} className="border rounded-lg px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Small (under 10 kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='S' /></div>
                      <div className="text-xs text-gray-600">Toy & small breeds</div>
                    </button>
                    <button onClick={() => { setSizeFilter('M'); setSizeHelpOpen(false); }} className="border rounded-lg px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Medium (10–25 kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='M' /></div>
                      <div className="text-xs text-gray-600">Beagle, Cocker, Indie (med)</div>
                    </button>
                    <button onClick={() => { setSizeFilter('L'); setSizeHelpOpen(false); }} className="border rounded-lg px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Large (25+ kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='L' /></div>
                      <div className="text-xs text-gray-600">Labrador, GSD, Rottweiler</div>
                    </button>
                  </div>
                  <div className="mt-4 text-xs text-gray-500">Tip: You can change size later using the chips on top.</div>
                  <div className="mt-3 text-right">
                    <button onClick={() => setSizeHelpOpen(false)} className="px-3 py-1.5 rounded-lg border">Close</button>
                  </div>
                </div>
              </div>
            )}

            {/* Main content */}
            <main className="mx-auto max-w-screen-xl px-3 sm:px-6 pt-0 pb-5 sm:pb-8 space-y-6 sm:space-y-8">
              {/* LANDING */}
              {page === "landing" && (
                <div className="space-y-4 sm:space-y-7">
                  {/* HERO with background image */}
                  <section className="relative overflow-hidden shadow-soft rounded-none -mt-0 w-screen left-1/2 right-1/2 -ml-[50vw] -mr-[50vw]">
                    <div className="absolute inset-0">
                      <img src="img/hero2.png" loading = "lazy" alt="Happy dog background" className="w-full h-full object-cover" />
                      <div className="absolute inset-0 bg-gradient-to-r from-black/55 via-black/35 to-transparent"></div>
                    </div>
                    <div className="relative p-6 sm:p-10 min-h-[260px] md:min-h-[420px] flex items-center">
                      <div className="max-w-2xl text-white flex flex-col items-center text-center mx-auto sm:mx-0 sm:items-start sm:text-left">
                      <span className="inline-block bg-green-500/90 text-white font-medium text-xs sm:text-sm px-2 py-1 rounded mb-3 shadow-md">
                        Vet Approved
                      </span>

                      <h2 className="text-2xl sm:text-4xl md:text-5xl font-extrabold leading-tight tracking-tight text-white drop-shadow-lg">
                        Happy Teeth, Happy Dogs!
                      </h2>

                      <p className="mt-2 text-sm sm:mt-3 sm:text-lg text-white/900 drop-shadow-md max-w-xs sm:max-w-md">
                        All-in-one dental care for your dog’s. <br></br> Paw Smile Kits fight plaque and keep your furry friends breath fresh!
                      </p>


                        {/* Reassurance bar (mobile only) */}
                        <div className="mt-3 w-full grid grid-cols-2 gap-2 text-[15px] text-black/80">
                          <div className="inline-block rounded-lg bg-white/90 text-center shadow-md px-3 py-1">🚚 Fast delivery</div>
                          <div className="inline-block rounded-lg bg-white/90 text-center shadow-md px-3 py-1">↩️ Easy returns</div>
                        </div>

                        {/* Centered CTAs on mobile */}
                        <div className="mt-5 flex flex-wrap justify-center sm:justify-start gap-3">
                          <PrimaryBtn onClick={() => navigate('shop')}>Shop Dental Kits</PrimaryBtn>
                          <button onClick={() => navigate('about')}
                            className="inline-flex items-center justify-center rounded-lg px-4 py-2 font-medium border border-white/70 text-white bg-white/10 hover:bg-white/20 transition">
                            Why it works
                          </button>
                        </div>

                        {/* What we sell chips */}
                        <div className="mt-4 hidden grid-cols-2 gap-2 w-full max-w-xs sm:max-w-md">
                          {["Toothbrush & Gel","Chew toy cleaners","Fresh‑breath spray","Dental wipes"].map((t) => (
                            <div key={t} className="text-[11px] sm:text-xs bg-white/70 text-gray-900 rounded-lg px-2 py-1 text-center">
                              {t}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </section>

                  {/* Best Sellers */}
                  <section className="bg-white p-3 sm:p-4 -mt-4 sm:mt-0 rounded-2xl shadow-soft">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-lg font-bold text-[var(--primary)]">Best Sellers</h3>

                      {/* Mobile arrows on top-right */}
                      <div className="sm:hidden flex items-center gap-2">
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Previous"
                          onClick={prevBS}
                        >
                          ‹
                        </button>
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Next"
                          onClick={nextBS}
                        >
                          ›
                        </button>
                      </div>
                    </div>

                    {/* Mobile: 1 row carousel (2 cards visible) */}
                    <div className="relative sm:hidden">
                      <div className="overflow-hidden">
                        <div
                          className="transition-all duration-500"
                          style={{
                            transform: `translateX(-${bsIndex * 100}%)`,
                            display: "grid",
                            gridTemplateColumns: `repeat(${Math.ceil(BS_ITEMS.length / BS_PER_SLIDE)}, 100%)`,
                          }}
                        >
                          {Array.from({ length: Math.ceil(BS_ITEMS.length / BS_PER_SLIDE) }).map((_, slideIdx) => (
                            <div key={slideIdx} className="grid grid-cols-2 gap-3">
                              {BS_ITEMS.slice(slideIdx * BS_PER_SLIDE, slideIdx * BS_PER_SLIDE + BS_PER_SLIDE).map(p => (
                                <div key={p.id} className="relative border rounded-2xl p-2 shadow hover:shadow-lg transition bg-white cursor-pointer"
                                  onClick={() => { setActiveId(p.id); navigate('detail'); }}>
                                  <div className="relative rounded-xl overflow-hidden aspect-[4/3] mb-1">
                                    <img src={p.image} alt={p.name} loading="lazy" className="w-full h-full object-cover" />
                                    <span className="absolute top-2 left-2 text-[10px] bg-[var(--primary)] text-white px-2 py-1 rounded-lg">{p.badge}</span>
                                    <span className="absolute top-2 right-2 text-[10px] bg-[var(--accent)] text-white px-2 py-1 rounded-lg">-{pctOff(p.price, p.compareAt)}%</span>
                                  </div>
                                  <div className="text-sm font-semibold leading-tight break-words">
                                    {p.name}
                                  </div>
                                  <div className="text-xs text-black-700">
                                    <span className="font-semibold">{formatINR(p.price)}</span>
                                    <span className="line-through-muted ml-1">{formatINR(p.compareAt)}</span>
                                  </div>
                                  <div className="text-[11px] text-gray-600 mt-1">⭐ {p.rating?.toFixed(1) ?? "4.7"} · 🚚 {p.eta ?? "2–4 days"}</div>

                                  <div className="mt-2 flex justify-end">
                                  {qtyInCart(p.id) > 0 ? (
                                    <div className="bg-[var(--accent)] text-white rounded-2xl shadow flex items-center overflow-hidden">
                                      <button
                                        onClick={(e) => { e.stopPropagation(); updateQty(p.id, Math.max(qtyInCart(p.id) - 1, 0)); }}
                                        className="px-2 py-1 text-base leading-none"
                                      >−</button>
                                      <div className="px-2 py-1 text-xs font-semibold">{qtyInCart(p.id)}</div>
                                      <button
                                        onClick={(e) => { e.stopPropagation(); addToCart(p.id); }}
                                        className="px-2 py-1 text-base leading-none"
                                      >+</button>
                                    </div>
                                  ) : (
                                    <button
                                      onClick={(e) => { e.stopPropagation(); addToCart(p.id); }}
                                      className="text-[11px] font-semibold bg-white text-[var(--accent)] border border-[var(--accent)] px-2 py-0.5 rounded-xl shadow"
                                    >
                                      ADD +
                                    </button>
                                  )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>

                    {/* Desktop/tablet: keep original 4-card grid */}
                    <div className="hidden sm:grid grid-cols-3 md:grid-cols-4 gap-3">
                      {CATALOG.slice(0,4).map(p => (
                        <div key={p.id} className="relative border rounded-2xl p-2 shadow hover:shadow-lg transition bg-white cursor-pointer"
                             onClick={() => { setActiveId(p.id); navigate('detail'); }}>
                          <div className="relative rounded-xl overflow-hidden aspect-[4/3] mb-1">
                            <img src={p.image} alt={p.name} loading="lazy" className="w-full h-full object-cover" />
                            <span className="absolute top-2 left-2 text-[10px] bg-[var(--primary)] text-white px-2 py-1 rounded-lg">{p.badge}</span>
                            <span className="absolute top-2 right-2 text-[10px] bg-[var(--accent)] text-white px-2 py-1 rounded-lg">-{pctOff(p.price, p.compareAt)}%</span>
                          </div>
                          <div className="text-sm font-semibold leading-tight break-words">
                            {p.name}
                          </div>
                          <div className="text-sm text-gray-700">
                            <span className="font-semibold">{formatINR(p.price)}</span>
                            <span className="line-through-muted ml-1">{formatINR(p.compareAt)}</span>
                          </div>
                          <div className="text-xs text-gray-600 mt-1">⭐ {p.rating?.toFixed(1) ?? "4.7"} · 🚚 {p.eta ?? "2–4 days"}</div>

                          {qtyInCart(p.id) > 0 ? (
                            <div className="absolute bottom-2 right-2 bg-[var(--accent)] text-white rounded-2xl shadow flex items-center overflow-hidden">
                              <button
                                onClick={(e) => { e.stopPropagation(); updateQty(p.id, Math.max(qtyInCart(p.id) - 1, 0)); }}
                                className="px-2 py-1 text-base leading-none"
                              >−</button>
                              <div className="px-2 py-1 text-sm font-semibold">{qtyInCart(p.id)}</div>
                              <button
                                onClick={(e) => { e.stopPropagation(); addToCart(p.id); }}
                                className="px-2 py-1 text-base leading-none"
                              >+</button>
                            </div>
                          ) : (
                            <button
                              onClick={(e) => { e.stopPropagation(); addToCart(p.id); }}
                              className="absolute bottom-2 right-2 text-[11px] font-semibold bg-white text-[var(--accent)] border border-[var(--accent)] px-2 py-0.5 rounded-xl shadow"
                            >
                              ADD +
                            </button>
                          )}
                        </div>
                      ))}
                    </div>
                  </section>

                  {/* Testimonials */}
                  <section className="bg-white rounded-2xl shadow-soft p-4 sm:p-6 -mt-2 sm:mt-0">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-lg sm:text-xl font-bold text-[var(--primary)]">
                        What Pet Parents Say
                      </h3>
                      <div className="flex items-center gap-2">
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Previous"
                          onClick={prevT}
                        >
                          ‹
                        </button>
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Next"
                          onClick={nextT}
                        >
                          ›
                        </button>
                      </div>
                    </div>

                    <div className="relative overflow-hidden">
                      <div
                        className="transition-all duration-500"
                        style={{
                          transform: `translateX(-${tIndex * 100}%)`,
                          display: "grid",
                          gridTemplateColumns: `repeat(${TESTIMONIALS.length}, 100%)`,
                        }}
                      >
                        {TESTIMONIALS.map((t, idx) => (
                          <div key={idx} className="p-2">
                            <div className="flex items-start gap-3 border rounded-lg p-4 bg-white shadow-sm">
                              <div className="w-10 h-10 rounded-full bg-[var(--primary)] text-white flex items-center justify-center text-sm font-semibold">
                                {t.name
                                  .split(" ")
                                  .map((w) => w[0])
                                  .slice(0,1)
                                  .join("")
                                  .toUpperCase()}
                              </div>

                              <div className="flex-1">
                                <div className="font-semibold text-gray-900 text-sm">{t.name}</div>
                                <p className="mt-1 text-gray-800 text-sm">"{t.text}"</p>
                                <div className="mt-1 flex items-center text-amber-500 text-sm leading-none">
                                  {"★".repeat(t.rating)}
                                  {Array(5 - t.rating).fill("☆")}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="mt-3 flex items-center justify-center gap-2">
                      {TESTIMONIALS.map((_, i) => (
                        <button
                          key={i}
                          onClick={() => setTIndex(i)}
                          className={`w-2.5 h-2.5 rounded-full ${i === tIndex ? "bg-[var(--primary)]" : "bg-gray-300"}`}
                          aria-label={`Go to slide ${i + 1}`}
                        ></button>
                      ))}
                    </div>
                  </section>

                  {/* Features */}
                  <section className="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 reveal">
                    {[
                      { title: "Vet Recommended", icon: "🩺", desc: "Designed with vets; gentle on gums." },
                      { title: "Safe & Natural",   icon: "🌿", desc: "Food‑grade, fluoride‑free ingredients." },
                      { title: "Easy Routine",     icon: "⚡", desc: "2‑min routine, 3x/week." },
                    ].map((f) => (
                      <div key={f.title} className="bg-white rounded-2xl shadow p-4 hover:shadow-lg transition">
                        <div className="flex items-center gap-3">
                          <div className="h-10 w-10 rounded-full bg-[var(--primary)]/10 flex items-center justify-center text-lg">{f.icon}</div>
                          <div>
                            <div className="font-semibold text-base">{f.title}</div>
                            <div className="text-sm text-gray-600">{f.desc}</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </section>
                </div>
              )}

              {/* ABOUT */}
              {page === "about" && (
                <section className="bg-white rounded-2xl shadow p-6 max-w-3xl mx-auto text-center">
                  <h2 className="text-2xl font-bold text-[var(--primary)] mb-2">Our Story</h2>
                  <p className="text-sm sm:text-base text-gray-700">We’re pet parents first. Our mission is to prevent dental disease in dogs with easy-to-use, safe, and effective kits. Every purchase supports dog shelters across India.</p>
                </section>
              )}

              {/* SHOP */}
              {page === "shop" && (
                <div>

                
                
                {/* Mobile: Filters + Sort row */}
                <div className="md:hidden mb-3 flex items-center justify-between gap-2">
                  <button onClick={()=>setFiltersOpen(true)}
                          className="flex items-center gap-2 rounded-full bg-white border px-3 py-1.5 shadow">
                    <FilterIcon className="w-4 h-4" />
                    <span className="text-sm">Filters</span>
                  </button>

                  <div className="flex-1"></div>

                  <div className="relative">
                    <select value={sort} onChange={(e)=>setSort(e.target.value)}
                            className="appearance-none rounded-full border px-3 py-1.5 pr-8 text-sm bg-white">
                      <option value="POPULAR">Popular</option>
                      <option value="NEW">New</option>
                      <option value="PRICE_LOW">Price: Low → High</option>
                      <option value="PRICE_HIGH">Price: High → Low</option>
                    </select>
                    <span className="pointer-events-none absolute right-2 top-1/2 -translate-y-1/2">▾</span>
                  </div>
                </div>

                {/* Circular dog-size selector (both views) */}
                <div className="mb-5 sm:mb-6 flex flex-wrap justify-center items-center gap-4 text-center">
                  <SizeCircle code="ALL" label="All"    active={sizeFilter==='ALL'} onClick={()=>setSizeFilter('ALL')} />
                  <SizeCircle code="S"   label="Small"  active={sizeFilter==='S'}   onClick={()=>setSizeFilter('S')}   />
                  <SizeCircle code="M"   label="Medium" active={sizeFilter==='M'}   onClick={()=>setSizeFilter('M')}   />
                  <SizeCircle code="L"   label="Large"  active={sizeFilter==='L'}   onClick={()=>setSizeFilter('L')}   />
                </div>
                {/* Size help trigger */}
                <div className="text-center -mt-3 mb-4">
                  <button
                    onClick={()=>setSizeHelpOpen(true)}
                    className="inline-flex items-center gap-1 text-xs sm:text-sm underline text-[var(--primary)] hover:opacity-80"
                  >
                    Don’t know your size?
                  </button>
                </div>
                {/* Separator line (mobile + desktop) */}
                <div className="mx-auto my-3 sm:my-4 w-full max-w-md sm:max-w-none px-2">
                  <div className="h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent"></div>
                </div>

                {/* Toolbar (desktop only) — pill style & prominent */}
                <div className="hidden md:flex items-center justify-between py-2 mb-2">
                  <button onClick={()=>setSidebarOpen(v=>!v)}
                          className="inline-flex items-center gap-2 rounded-full border px-4 py-2 bg-white shadow hover:bg-[var(--bg)]">
                    <FilterIcon className="w-5 h-5" />
                    <span className="font-medium">Filters</span>
                  </button>
                  <div className="text-sm text-gray-600">{shopProducts.length} products</div>
                  <div className="relative">
                    <select value={sort} onChange={(e)=>setSort(e.target.value)}
                            className="appearance-none rounded-full border px-4 py-2 pr-10 text-sm bg-white">
                      <option value="POPULAR">Popular</option>
                      <option value="NEW">New</option>
                      <option value="PRICE_LOW">Price: Low → High</option>
                      <option value="PRICE_HIGH">Price: High → Low</option>
                    </select>
                    <span className="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2">▾</span>
                  </div>
                </div>

                {/* SHOP layout (sidebar collapsible) */}
{/* SHOP layout (sidebar collapsible) */}
                <div className={sidebarOpen ? 'shop-with-sidebar' : ''}>
                  {sidebarOpen && (
                    <aside className="hidden md:block bg-white rounded-2xl shadow p-4 h-fit sticky top-24">
                      <div className="space-y-5 text-sm">
                        <div>
                          <div className="flex items-center justify-between font-semibold">
                            <span>Price</span>
                            <span className="text-xs text-gray-500">{'₹'+minP.toFixed(0)} – {'₹'+priceCap.toFixed(0)}</span>
                          </div>
                          <input type="range" min={minP} max={maxP} value={priceCap} onChange={(e)=>setPriceCap(Number(e.target.value))} className="w-full accent-[var(--primary)] mt-2" />
                          <div className="flex justify-between text-xs mt-1"><span>{'₹'+minP.toFixed(0)}</span><span>{'₹'+maxP.toFixed(0)}</span></div>
                        </div>
                        <div>
                          <div className="font-semibold mb-2">Product Type</div>
                          {['All','Brush','Strips','Dental Kit','Chew Toy','Others'].map(t => (
                            <label key={t} className="filter-row">
                              <span className="flex items-center gap-2">
                                <input type="checkbox" checked={!!typesSelected[t]}
                                  onChange={()=>{ if (t==='All') setTypesSelected({All:true, Brush:false, Strips:false, 'Dental Kit':false, 'Chew Toy':false, Others:false}); else setTypesSelected(prev=>{ const next={...prev,[t]:!prev[t], All:false}; const any=Object.entries(next).some(([k,v])=>k!=='All'&&v); if(!any) next.All=true; return next; }); }}
                                />
                                {t}
                              </span>
                            </label>
                          ))}
                        </div>
                        <div>
                          <div className="font-semibold mb-2">Breed Size</div>
                          {['S','M','L'].map(sz => (
                            <label key={sz} className="filter-row">
                              <span className="flex items-center gap-2"><input type="checkbox" checked={!!sizesSelected[sz]} onChange={(e)=>setSizesSelected(prev=>({...prev,[sz]:e.target.checked}))} />{sz==='S'?'Small':sz==='M'?'Medium':'Large'}</span>
                            </label>
                          ))}
                        </div>
                        <div className="filter-row">
                          <div>Fast delivery (≤ 3 days)</div>
                          <label className="inline-flex items-center cursor-pointer">
                            <input type="checkbox" className="sr-only peer" checked={fastDeliveryOnly} onChange={(e)=>setFastDeliveryOnly(e.target.checked)} />
                            <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[var(--primary)] relative transition"><div className="absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full transition peer-checked:translate-x-5"></div></div>
                          </label>
                        </div>
                        <button onClick={()=>{ setPriceCap(maxP); setTypesSelected({All:true, Brush:false, Strips:false, 'Dental Kit':false, 'Chew Toy':false, Others:false}); setSizesSelected({S:false,M:false,L:false}); setFastDeliveryOnly(false); }} className="w-full rounded-xl border px-4 py-2 bg-white hover:bg-gray-50">Reset</button>
                      </div>
                    </aside>
                  )}

                  {/* Product grid with compact auto-fill columns */}
                  <section className="grid grid-cols-2 sm:[grid-template-columns:repeat(auto-fill,minmax(260px,1fr))] gap-3 md:gap-4 items-start bg-white rounded-2xl shadow-soft p-2 sm:bg-transparent sm:p-0">
                    {shopProducts.map(p => (
                      <div key={p.id} className="relative border rounded-2xl p-2 shadow hover:shadow-lg transition bg-white cursor-pointer"
                           onClick={() => { setActiveId(p.id); navigate('detail'); }}>
                        <div className="relative rounded-xl overflow-hidden aspect-[4/3] mb-1">
                          <img src={p.image} alt={p.name} loading="lazy" className="w-full h-full object-cover" />
                          <span className="absolute top-2 left-2 text-[10px] bg-[var(--primary)] text-white px-2 py-1 rounded-lg">{p.badge}</span>
                          <span className="absolute top-2 right-2 text-[10px] bg-[var(--accent)] text-white px-2 py-1 rounded-lg">-{pctOff(p.price, p.compareAt)}%</span>
                        </div>
                        <div className="text-sm font-semibold leading-tight break-words">
                          {p.name}
                        </div>
                        <div className="text-sm text-black-700">
                          <span className="font-semibold">{formatINR(p.price)}</span>
                          <span className="line-through-muted ml-1">{formatINR(p.compareAt)}</span>
                        </div>
                        <div className="text-xs text-gray-600 mt-1">⭐ {p.rating?.toFixed(1) ?? "4.7"} · 🚚 {p.eta ?? "2–4 days"}</div>

                        {qtyInCart(p.id) > 0 ? (
                          <div className="absolute bottom-2 right-2 bg-[var(--accent)] text-white rounded-2xl shadow flex items-center overflow-hidden">
                            <button onClick={(e) => { e.stopPropagation(); updateQty(p.id, Math.max(qtyInCart(p.id) - 1, 0)); }} className="px-2 py-1 text-base leading-none">−</button>
                            <div className="px-2 py-1 text-sm font-semibold">{qtyInCart(p.id)}</div>
                            <button onClick={(e) => { e.stopPropagation(); addToCart(p.id); }} className="px-2 py-1 text-base leading-none">+</button>
                          </div>
                        ) : (
                          <button onClick={(e) => { e.stopPropagation(); addToCart(p.id); }} className="absolute bottom-2 right-2 text-[11px] font-semibold bg-white text-[var(--accent)] border border-[var(--accent)] px-3 py-1 rounded-xl shadow">ADD +</button>
                        )}
                      </div>
                    ))}
                  </section>
                </div>

                {/* Mobile drawer (unchanged) */}
                <div className={filtersOpen ? 'fixed inset-0 z-50' : 'fixed inset-0 z-50 pointer-events-none'}>
                  <div className={'absolute inset-0 bg-black/40 transition-opacity ' + (filtersOpen ? 'opacity-100' : 'opacity-0')} onClick={()=>setFiltersOpen(false)}></div>
                  <aside className={'drawer absolute right-0 top-0 h-full w-[92%] sm:w-[420px] bg-white shadow-2xl p-4 ' + (filtersOpen ? 'open' : '')}>
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-base font-bold text-[var(--primary)]">Filters</h3>
                      <button className="text-gray-500 hover:text-black" onClick={()=>setFiltersOpen(false)}>✕</button>
                    </div>

                    <div className="space-y-4 text-sm pb-20">
                      <div>
                        <div className="flex items-center justify-between font-semibold">
                          <span>Price</span>
                          <span className="text-xs text-gray-500">{'₹'+minP.toFixed(0)} – {'₹'+priceCap.toFixed(0)}</span>
                        </div>
                        <input type="range" min={minP} max={maxP} value={priceCap} onChange={(e)=>setPriceCap(Number(e.target.value))} className="w-full accent-[var(--primary)] mt-2" />
                        <div className="flex justify-between text-xs mt-1"><span>{'₹'+minP.toFixed(0)}</span><span>{'₹'+maxP.toFixed(0)}</span></div>
                      </div>
                      <div>
                        <div className="font-semibold mb-2">Product Type</div>
                        <div className="grid grid-cols-2 gap-2">
                          {['All','Brush','Strips','Dental Kit','Chew Toy','Others'].map(t => (
                            <label key={t} className="filter-row">
                              <span className="flex items-center gap-2">
                                <input type="checkbox" checked={!!typesSelected[t]}
                                  onChange={()=>{ if (t==='All') setTypesSelected({All:true, Brush:false, Strips:false, 'Dental Kit':false, 'Chew Toy':false, Others:false}); else setTypesSelected(prev=>{ const next={...prev,[t]:!prev[t], All:false}; const any=Object.entries(next).some(([k,v])=>k!=='All'&&v); if(!any) next.All=true; return next; }); }}
                                />
                                {t}
                              </span>
                            </label>
                          ))}
                        </div>
                      </div>
                      <div>
                        <div className="font-semibold mb-2">Breed Size</div>
                        {['S','M','L'].map(sz => (
                          <label key={sz} className="filter-row mb-2">
                            <span className="flex items-center gap-2"><input type="checkbox" checked={!!sizesSelected[sz]} onChange={(e)=>setSizesSelected(prev=>({...prev,[sz]:e.target.checked}))} />{sz==='S'?'Small':sz==='M'?'Medium':'Large'}</span>
                          </label>
                        ))}
                      </div>
                      <div className="filter-row">
                        <div>Fast delivery (≤ 3 days)</div>
                        <label className="inline-flex items-center cursor-pointer">
                          <input type="checkbox" className="sr-only peer" checked={fastDeliveryOnly} onChange={(e)=>setFastDeliveryOnly(e.target.checked)} />
                          <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-[var(--primary)] relative transition"><div className="absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full transition peer-checked:translate-x-5"></div></div>
                        </label>
                      </div>
                      <div>
                        <div className="font-semibold mb-2">Sort by</div>
                        <select value={sort} onChange={(e)=>setSort(e.target.value)} className="w-full border rounded-xl px-3 py-2">
                          <option value="POPULAR">Popular</option>
                          <option value="NEW">New</option>
                          <option value="PRICE_LOW">Price: Low → High</option>
                          <option value="PRICE_HIGH">Price: High → Low</option>
                        </select>
                      </div>
                    </div>
                    <div className="apply-bar">
                      <div className="flex gap-2">
                        <button onClick={()=>{ setPriceCap(maxP); setTypesSelected({All:true, Brush:false, Strips:false, 'Dental Kit':false, 'Chew Toy':false, Others:false}); setSizesSelected({S:false,M:false,L:false}); setFastDeliveryOnly(false); setSort('POPULAR'); }} className="flex-1 border rounded-lg px-3 py-2">Reset</button>
                        <button onClick={()=>setFiltersOpen(false)} className="flex-1 rounded-lg px-3 py-2 text-white bg-[var(--accent)]">Apply Filter</button>
                      </div>
                    </div>
                  </aside>
                </div>
    
                </div>
              )}

              {/* DETAIL */}
                {page === "detail" && (
                  <section className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
                    {/* Product Image */}
                    <div className="rounded-2xl overflow-hidden shadow aspect-[16/10]">
                      <img
                        src={activeProduct.image}
                        alt={activeProduct.name}
                        loading="lazy"
                        className="w-full h-full object-cover"
                      />
                    </div>

                    {/* Product Info */}
                    <div className="bg-white rounded-2xl shadow p-4 sm:p-6">
                      <h2 className="text-xl sm:text-2xl font-bold text-[var(--primary)]">
                        {activeProduct.name}
                      </h2>

                      {/* Price */}
                      <p className="mt-2">
                        <span className="font-semibold">
                          {formatINR(activeProduct.price)}
                        </span>
                        <span className="line-through text-gray-400 ml-2">
                          {formatINR(activeProduct.compareAt)}
                        </span>
                        <span className="ml-2 text-[10px] sm:text-xs bg-[var(--accent)] text-white px-2 py-0.5 rounded">
                          {pctOff(activeProduct.price, activeProduct.compareAt)}% OFF
                        </span>
                      </p>

                      {/* Short description */}
                      <p className="mt-3 text-sm sm:text-base">
                        Everything you need to keep your dog’s teeth clean and healthy.
                      </p>

                      {/* Sizes */}
                      <div className="mt-3 text-xs sm:text-sm text-gray-700">
                        Good for sizes: {(activeProduct.sizes || []).join(", ")}.
                        <button
                          onClick={() => {
                            navigate("shop");
                            setSizeFilter((activeProduct.sizes || [])[0] || "ALL");
                          }}
                          className="ml-2 underline text-[var(--primary)]"
                        >
                          See matching items
                        </button>
                      </div>

                      {/* Add to Cart & Buy Now buttons */}
                      <div className="mt-4 flex gap-3">
                        <button
                          onClick={() => addToCart(activeProduct.id)}
                          className="flex-1 text-sm sm:text-base font-semibold bg-[var(--accent)] text-white px-4 py-2 rounded-xl shadow hover:opacity-90 transition"
                        >
                          Add to Cart
                        </button>

<button
  onClick={() => {
    addToCart(activeProduct.id);     // ensure item is in cart
    setSearchOpen?.(false);          // close search overlay if present
    setDrawerOpen?.(false);          // close cart drawer if present
    setFiltersOpen?.(false);         // close filters panel if present
    setTimeout(() => navigate('address'), 0); // then go to Address
  }}
  className="flex-1 text-sm sm:text-base font-semibold bg-white text-[var(--accent)] border border-[var(--accent)] px-4 py-2 rounded-xl shadow hover:bg-[var(--bg)] transition"
>
  Buy Now
</button>

                      </div>

                      {/* Description */}
                      <div className="mt-6">
                        <div className="grid grid-cols-3 text-xs sm:text-sm">
                          <div className="border-b-2 border-[var(--primary)] pb-2 font-semibold">
                            Description
                          </div>
                        </div>
                        <p className="mt-3 text-xs sm:text-sm">
                          Starter kit with brush, gel, and tutorial. Gentle on gums,
                          effective on plaque.
                        </p>

                        {/* Reviews carousel */}
                        <section className="bg-white rounded-2xl shadow-soft p-4 sm:p-6 mt-6">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="text-lg sm:text-xl font-bold text-[var(--primary)]">
                              Product Reviews
                            </h3>
                            <div className="flex items-center gap-2">
                              <button
                                className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                                aria-label="Previous"
                                onClick={prevT}
                              >
                                ‹
                              </button>
                              <button
                                className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                                aria-label="Next"
                                onClick={nextT}
                              >
                                ›
                              </button>
                            </div>
                          </div>

                          {/* Carousel inner */}
                          <div className="relative overflow-hidden">
                            <div
                              className="transition-all duration-500"
                              style={{
                                transform: `translateX(-${tIndex * 100}%)`,
                                display: "grid",
                                gridTemplateColumns: `repeat(${TESTIMONIALS.length}, 100%)`,
                              }}
                            >
                              {TESTIMONIALS.map((t, idx) => (
                                <div key={idx} className="p-2">
                                  <div className="flex items-start gap-3 border rounded-lg p-4 bg-white shadow-sm">
                                    <div className="w-10 h-10 rounded-full bg-[var(--primary)] text-white flex items-center justify-center text-sm font-semibold">
                                      {t.name
                                        .split(" ")
                                        .map((w) => w[0])
                                        .slice(0, 1)
                                        .join("")
                                        .toUpperCase()}
                                    </div>

                                    <div className="flex-1">
                                      <div className="font-semibold text-gray-900 text-sm">
                                        {t.name}
                                      </div>
                                      <p className="mt-1 text-gray-800 text-sm">
                                        "{t.text}"
                                      </p>
                                      <div className="mt-1 flex items-center text-amber-500 text-sm leading-none">
                                        {"★".repeat(t.rating)}
                                        {Array(5 - t.rating).fill("☆")}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>

                          {/* Dots */}
                          <div className="mt-3 flex items-center justify-center gap-2">
                            {TESTIMONIALS.map((_, i) => (
                              <button
                                key={i}
                                onClick={() => setTIndex(i)}
                                className={`w-2.5 h-2.5 rounded-full ${
                                  i === tIndex
                                    ? "bg-[var(--primary)]"
                                    : "bg-gray-300"
                                }`}
                                aria-label={`Go to slide ${i + 1}`}
                              ></button>
                            ))}
                          </div>
                        </section>
                      </div>
                    </div>
                  </section>
                )}

              {/* ADDRESS */}
              {page === "address" && (
                <section className="max-w-md w-full mx-auto bg-white rounded-2xl shadow p-4 sm:p-6">
                  <h2 className="text-lg sm:text-xl font-bold text-[var(--primary)]">Delivery Details</h2>
                  <div className="text-xs mt-1 text-gray-600">Tip: Add more items and apply SMILE15 at checkout to save more.</div>
                  <div className="mt-4 space-y-3">
                    <input className="w-full rounded-lg border px-3 py-2 text-sm sm:text-base" placeholder="Full Name" />
                    <input className="w-full rounded-lg border px-3 py-2 text-sm sm:text-base" placeholder="Mobile Number" />
                    <input className="w-full rounded-lg border px-3 py-2 text-sm sm:text-base" placeholder="Address" />
                    <div className="grid grid-cols-2 gap-3">
                      <input className="rounded-lg border px-3 py-2 text-sm sm:text-base" placeholder="City" />
                      <input className="rounded-lg border px-3 py-2 text-sm sm:text-base" placeholder="Pin Code" />
                    </div>
                    <div className="border rounded-lg p-3 text-sm space-y-1">
                      <div className="flex justify-between"><span>Items</span><span>{cartCount}</span></div>
                      <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                      <div className="flex justify-between"><span>Discount (if coupon)</span><span>-{formatINR(couponApplied ? Math.round(cartSubtotal * 0.15) : 0)}</span></div>
                      <div className="flex justify-between font-semibold"><span>To Pay</span><span>{formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}</span></div>
                    </div>
                    <PrimaryBtn onClick={() => navigate('payment')}>Proceed to Payment</PrimaryBtn>
                  </div>
                </section>
              )}

              {/* PAYMENT */}
              {page === "payment" && (
                <section className="max-w-md w-full mx-auto bg-white rounded-2xl shadow p-4 sm:p-6">
                  <div className="mb-3 flex items-center justify-between">
                    <div className="text-xs sm:text-sm">
                      <span className="font-medium">Address</span> → <span className="font-bold text-[var(--primary)]">Payment</span> → <span className="text-gray-400">Thank You</span>
                    </div>
                    <div className="flex items-center gap-1 text-xs text-gray-600">
                      <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <path d="M12 17a5 5 0 100-10 5 5 0 000 10z"/><path d="M19.4 15a1.65 1.65 0 01.33 1.82l-1.1 2.2a1.65 1.65 0 01-1.49.93H6.86a1.65 1.65 0 01-1.49-.93l-1.1-2.2A1.65 1.65 0 014.6 15"/>
                      </svg>
                      <span>Secure checkout</span>
                    </div>
                  </div>


                  <div className="mb-4">
                    <p className="text-sm">Order Total</p>
                    <p className="text-2xl font-bold text-[var(--primary)] leading-tight">
                      {formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}
                    </p>
                    <p className="text-xs text-gray-500">Including taxes & discounts</p>
                  </div>

                  <div className="space-y-2 mb-4">
                    {["UPI","Card","NetBanking","COD"].map((m) => (
                      <label key={m} className={`flex items-center justify-between border rounded-lg px-3 py-2 cursor-pointer ${payMethod===m ? "border-[var(--primary)] bg-blue-50/40" : "border-gray-200"}`}>
                        <div className="flex items-center gap-2">
                          <input type="radio" name="method" checked={payMethod===m} onChange={() => setPayMethod(m)} />
                          <span className="text-sm font-medium">{m}</span>
                        </div>
                        {m==="COD" ? <span className="text-[10px] bg-gray-100 px-2 py-0.5 rounded">₹30 fee</span> : <span className="text-[10px] bg-green-100 text-green-700 px-2 py-0.5 rounded">Recommended</span>}
                      </label>
                    ))}
                  </div>

                  {payMethod === "UPI" && (
                    <div className="mb-4">
                      <input className="w-full rounded-lg border px-3 py-2 text-sm" placeholder="Enter UPI ID (e.g., name@bank)" />
                      <div className="text-xs text-gray-500 mt-1">We’ll open your UPI app to confirm.</div>
                    </div>
                  )}
                  {payMethod === "Card" && (
                    <div className="mb-4 grid grid-cols-1 gap-2">
                      <input className="rounded-lg border px-3 py-2 text-sm" placeholder="Card number" />
                      <div className="grid grid-cols-2 gap-2">
                        <input className="rounded-lg border px-3 py-2 text-sm" placeholder="MM/YY" />
                        <input className="rounded-lg border px-3 py-2 text-sm" placeholder="CVV" />
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between text-xs text-gray-600 mb-3">
                    <div className="flex items-center gap-1">
                      <span>🔒</span>
                      <span>256‑bit SSL encryption</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span>🛡️</span>
                      <span>Trusted by 10k+ pet parents</span>
                    </div>
                  </div>

                  <PrimaryBtn
                    onClick={() => {
                      setCart([]);
                      setCouponApplied(false);
                      navigate('thankyou');
                    }}
                    className="w-full"
                  >
                    Pay Now
                  </PrimaryBtn>
                </section>
              )}

              {/* THANK YOU */}
              {page === "thankyou" && (
                <section className="text-center bg-white rounded-2xl shadow p-6 sm:p-8 max-w-lg w-full mx-auto">
                  <div className="rounded-XL overflow-hidden aspect-[25/17] mb-4">
                    <img src="img/thankyou.png" alt="Thank you dog" loading="lazy" className="w-full h-full object-cover" />
                  </div>
                  <h2 className="text-xl sm:text-2xl font-bold text-[var(--accent)]">Thank You!</h2>
                  <p className="mt-2">Your order has been placed successfully.</p>
                  <p className="mt-2 text-sm text-gray-700">
                    <span className="font-semibold text-emerald-700">+50 Paw-Coins</span> on next checkout <span className="text-gray-500">(1 Paw Coin = ₹1)</span>
                  </p>
                  <p className="text-sm mt-2">Estimated delivery: 3–5 days</p>
                  <div className="mt-4"><OutlineBtn onClick={() => { setPage('landing'); setHistory([]); }}>Back to Home</OutlineBtn></div>
                </section>
              )}
            </main>

            {/* Sticky CTA (mobile only, Home page only) */}
            {page === "landing" && !drawerOpen && (
              <div className="fixed bottom-3 inset-x-3 sm:hidden z-40">
                <button
                  onClick={() => navigate('shop')}
                  className="w-full rounded-lg py-3 text-white bg-[var(--accent)] shadow-lg"
                >
                  Shop Dental Kits
                </button>
              </div>
            )}
          </div>
        );
      }

      // Mount React app
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<App />);
    </script>
  
</body>
</html>
