<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Paw Smile</title>

    <!-- React + Babel (kept for easy local double-click testing) -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Tailwind CDN -->
    <script defer src="https://cdn.tailwindcss.com"></script>

    <!-- Theme / variables (no functional change) -->
    <link rel="stylesheet" href="colors.css" />
    <link rel="stylesheet" href="theme.css" />
    <style>
      .shadow-soft { box-shadow: 0 10px 30px rgba(0,0,0,0.08); }
      .line-through-muted { text-decoration: line-through; color: #9ca3af; }
    
      .reveal { opacity: 0; transform: translateY(8px); transition: opacity .5s ease, transform .5s ease; }
      .reveal.revealed { opacity: 1; transform: translateY(0); }
</style>
  </head>
  <body class="bg-[var(--bg)] text-[var(--text)]">
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useMemo, useEffect } = React;

      const PrimaryBtn = ({ children, onClick, className = "", disabled = false }) => (
        <button
          onClick={onClick}
          disabled={disabled}
          className={
            "inline-flex items-center justify-center rounded-xl px-3 py-2 sm:px-4 sm:py-2 font-medium text-white bg-[var(--accent)] " +
            "hover:opacity-90 transition disabled:opacity-50 " + className
          }
        >
          {children}
        </button>
      );
      const OutlineBtn = ({ children, onClick, className = "" }) => (
        <button
          onClick={onClick}
          className={
            "inline-flex items-center justify-center rounded-xl px-3 py-2 sm:px-4 sm:py-2 font-medium border border-[var(--primary)] " +
            "text-[var(--primary)] bg-white hover:bg-[var(--bg)] transition " + className
          }
        >
          {children}
        </button>
      );

      const formatINR = (n) => "₹" + n.toFixed(0);
      const pctOff = (price, compareAt) => Math.round(((compareAt - price) / compareAt) * 100);
      // Simple dog silhouette icon that scales by size
      const SizeIcon = ({ t = 'S' }) => {
        const sizeClass = t === 'S' ? 'h-4 w-4' : t === 'M' ? 'h-5 w-5' : 'h-6 w-6';
        return (
          <svg viewBox="0 0 64 64" className={sizeClass} aria-hidden="true">
            {/* stylized dog head silhouette */}
            <path d="M10 26c2-6 8-12 18-12 10 0 14 4 18 8 3 3 7 2 8 4 1 3-2 5-4 6 0 0 2 10-8 16-7 4-15 2-20-2-6-5-7-13-6-20z" fill="currentColor" opacity="0.85"/>
            <circle cx="38" cy="30" r="2" fill="#fff"/>
            <path d="M20 18l6 6" stroke="currentColor" strokeWidth="3" strokeLinecap="round" opacity="0.85"/>
          </svg>
        );
      };


      const CATALOG = [
{ id: 1, name: "Complete Dental Care Kit", price: 499, compareAt: 699, stock: 7,  image: "https://placedog.net/600/420?id=201", badge: "Best Seller" , sizes: ['S','M','L'] },
        { id: 2, name: "Puppy Gentle Brush + Gel", price: 399, compareAt: 549, stock: 12, image: "https://placedog.net/600/420?id=202", badge: "New" , sizes: ['S','M'] },
        { id: 3, name: "Advanced Plaque Remover",  price: 599, compareAt: 799, stock: 5,  image: "https://placedog.net/600/420?id=203", badge: "Limited" , sizes: ['M','L'] },,
  { id: 4, name: "Chew Toy Tooth Cleaner", price: 299, compareAt: 399, stock: 20, image: "https://placedog.net/600/420?id=204", badge: "Popular", sizes: ['S','M'] },
  { id: 5, name: "Herbal Fresh Breath Spray", price: 199, compareAt: 299, stock: 15, image: "https://placedog.net/600/420?id=205", badge: "New", sizes: ['S','M','L'] },
  { id: 6, name: "Dental Wipes Pack", price: 349, compareAt: 449, stock: 25, image: "https://placedog.net/600/420?id=206", badge: "Value Pack", sizes: ['S','L'] }
];

      function App() {
        const [page, setPage] = useState("landing");
        const [cart, setCart] = useState([]);
        const [activeId, setActiveId] = useState(CATALOG[0].id);

        const [countdownSeconds, setCountdownSeconds] = useState(2 * 60 * 60);
        useEffect(() => {
          const t = setInterval(() => setCountdownSeconds(s => Math.max(s - 1, 0)), 1000);
          return () => clearInterval(t);
        }, []);
        const timeLeft = useMemo(() => {
          const h = String(Math.floor(countdownSeconds / 3600)).padStart(2, "0");
          const m = String(Math.floor((countdownSeconds % 3600) / 60)).padStart(2, "0");
          const s = String(countdownSeconds % 60).padStart(2, "0");
          return `${h}:${m}:${s}`;
        }, [countdownSeconds]);

        const [coupon, setCoupon] = useState("SMILE15");
        const [couponApplied, setCouponApplied] = useState(false);
        const FREE_SHIPPING_AT = 999;

        const cartCount = useMemo(() => cart.reduce((sum, l) => sum + l.qty, 0), [cart]);
        const cartSubtotal = useMemo(() => cart.reduce((sum, l) => {
          const p = CATALOG.find(x => x.id === l.id);
          return sum + (p ? p.price * l.qty : 0);
        }, 0), [cart]);
        const discountValue = useMemo(() => couponApplied ? Math.round(cartSubtotal * 0.15) : 0, [cartSubtotal, couponApplied]);
        const cartTotal = Math.max(cartSubtotal - discountValue, 0);
        const freeShipGap = Math.max(FREE_SHIPPING_AT - cartTotal, 0);

        const [drawerOpen, setDrawerOpen] = useState(false);

        // Size filter state for Shop
        const [sizeFilter, setSizeFilter] = useState('ALL'); // ALL | S | M | L
        const [sizeHelpOpen, setSizeHelpOpen] = useState(false);

        const addToCart = (id, qty = 1) => {
          setCart(prev => {
            const line = prev.find(l => l.id === id);
            return line ? prev.map(l => l.id === id ? { ...l, qty: l.qty + qty } : l) : [...prev, { id, qty }];
          });
        };
        const updateQty = (id, qty) => {
          if (qty <= 0) setCart(prev => prev.filter(l => l.id !== id));
          else setCart(prev => prev.map(l => l.id === id ? { ...l, qty } : l));
        };

        const activeProduct = CATALOG.find(p => p.id === activeId) || CATALOG[0];
        // Filter products for Shop page based on size
        const shopProducts = useMemo(() => {
          if (sizeFilter === 'ALL') return CATALOG;
          return CATALOG.filter(p => (p.sizes || []).includes(sizeFilter));
        }, [sizeFilter]);


        const NavButton = ({ label, goto }) => (
          <button onClick={() => setPage(goto)} className="hover:opacity-90">{label}</button>
        );

        // ---------- FeatureCard (for improved Features section) ----------
        const FeatureCard = ({ title, img, bullets = [], ctaLabel = "Learn more", onClick }) => (
          <div className="bg-white rounded-2xl shadow hover:shadow-lg transition p-4 flex flex-col">
            <div className="relative rounded-xl overflow-hidden aspect-[16/9] mb-3">
              <img src={img} alt={title} loading="lazy" className="w-full h-full object-cover" />
              <span className="absolute top-2 left-2 text-[10px] bg-black/60 text-white px-2 py-0.5 rounded">{title}</span>
            </div>
            <h3 className="font-semibold text-base sm:text-lg text-gray-900">{title}</h3>
            <ul className="mt-2 space-y-1.5 text-sm text-gray-700 flex-1">
              {bullets.map((b, i) => (
                <li key={i} className="flex items-start gap-2">
                  <span className="mt-0.5 inline-flex h-4 w-4 items-center justify-center rounded-full bg-green-100 text-green-700 text-[10px]">✓</span>
                  <span>{b}</span>
                </li>
              ))}
            </ul>
            <button onClick={onClick} className="mt-3 self-start text-xs font-medium text-[var(--primary)] hover:underline">{ctaLabel} →</button>
          </div>
        );

        // ---------- Testimonials data ----------
        const TESTIMONIALS = [
          { name: "Aisha & Bruno", text: "Bruno actually lets me brush now. The gel smells good and no more bad breath!", rating: 5 },
          { name: "Rahul & Coco", text: "Easy routine, noticeable difference in 2 weeks. Great value for money.", rating: 5 },
          { name: "Meera & Simba", text: "Vet recommended this. The brush is soft and Coco loves the taste.", rating: 4 },
        ];
        const [tIndex, setTIndex] = useState(0);
        const nextT = () => setTIndex(i => (i + 1) % TESTIMONIALS.length);
        const prevT = () => setTIndex(i => (i - 1 + TESTIMONIALS.length) % TESTIMONIALS.length);
        useEffect(() => {
          const id = setInterval(nextT, 6500); // slower for readability
          return () => clearInterval(id);
        }, []);
      // Minimal reveal-on-scroll (fix disappearing features)
      useEffect(() => {
        const els = document.querySelectorAll('.reveal');
        const io = new IntersectionObserver((entries) => {
          entries.forEach((e) => {
            if (e.isIntersecting) {
              e.target.classList.add('revealed');
              io.unobserve(e.target); // stop observing once revealed
            }
          });
        }, { threshold: 0.1 });
        els.forEach((el) => io.observe(el));
        return () => io.disconnect();
      }, [page]); // re-run on page change
// ---------- NEW: Search state (desktop + mobile overlay) ----------
        const [searchOpen, setSearchOpen] = useState(false);
        const [searchQuery, setSearchQuery] = useState("");
        const filteredProducts = useMemo(
          () =>
            CATALOG.filter(p =>
              p.name.toLowerCase().includes(searchQuery.trim().toLowerCase())
            ),
          [searchQuery]
        );

        return (
          <div className="min-h-screen">
            {/* Promo bar */}
            <div className="w-full bg-[var(--dark)] text-white text-center text-xs sm:text-sm py-2 px-3">
              <span className="font-semibold">Flash Sale</span>: 15% off with <span className="font-mono bg-white text-black px-1 rounded">SMILE15</span> — Ends in {timeLeft}
            </div>

            {/* ---------- UPDATED HEADER WITH SEARCH + COMPACT NAV ---------- */}
            <header className="sticky top-0 z-50 w-full bg-[var(--primary)] text-white shadow">
  <div className="mx-auto max-w-screen-xl px-4 sm:px-6 py-3 sm:py-4 flex items-center justify-between gap-3">
    {/* Left: Logo (shrink, no fixed width) */}
    <div className="shrink-0">
      <button
        onClick={() => { setPage('landing'); window.scrollTo?.({ top: 0, behavior: 'smooth' }); }}
        className="flex items-center gap-2 group"
        aria-label="Go to Home"
        title="Paw Smile Dental — Home"
      >
        <svg width="150" height="34" viewBox="0 0 320 72" fill="none" xmlns="http://www.w3.org/2000/svg" className="transition transform group-hover:scale-[1.02]">
          <defs>
            <linearGradient id="grad" x1="0" y1="0" x2="1" y2="1">
              <stop offset="0%" stopColor="#ffffff" stopOpacity="1"/>
              <stop offset="100%" stopColor="#dbeafe" stopOpacity="1"/>
            </linearGradient>
          </defs>
          <g>
            <circle cx="28" cy="30" r="10" fill="url(#grad)"/>
            <circle cx="18" cy="18" r="5" fill="#ffffff" opacity="0.9"/>
            <circle cx="28" cy="14" r="5" fill="#ffffff" opacity="0.9"/>
            <circle cx="38" cy="18" r="5" fill="#ffffff" opacity="0.9"/>
            <path d="M22 36c6-2 16-2 22 0 2 6-2 12-6 12-3 0-5-3-5-6 0 3-2 6-5 6-4 0-8-6-6-12z" fill="#ffffff"/>
          </g>
          <text x="68" y="44" font-family="Segoe UI, system-ui, -apple-system, Roboto, Helvetica, Arial, sans-serif" font-weight="800" font-size="28" fill="#ffffff" letter-spacing="0.5">Paw Smile</text>
        </svg>
      </button>
    </div>

    {/* Center: Compact desktop nav truly centered */}
    <div className="hidden sm:flex flex-1 justify-center">
      <nav className="flex items-center gap-2 rounded-full bg-white/10 backdrop-blur px-2 py-1">
        <button onClick={() => setPage('landing')} className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Home</button>
        <button onClick={() => setPage('about')}   className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">About Us</button>
        <button onClick={() => setPage('shop')}    className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Shop</button>
        <button onClick={() => setPage('about')}    className="px-3 py-1 rounded-full hover:bg-white/20 text-sm font-medium">Contact</button>
      </nav>
    </div>

    {/* Right: Desktop search + cart / Mobile actions (shrink, hugs right) */}
    <div className="shrink-0 flex items-center justify-end gap-2">
      {/* Desktop search */}
      <div className="hidden md:flex items-center rounded-full bg-white/15 border border-white/20 px-3 py-1.5">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" className="opacity-80">
          <path d="M21 21l-4.3-4.3m1.8-4.7a7 7 0 11-14 0 7 7 0 0114 0z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
        <input
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search products…"
          className="bg-transparent placeholder-white/70 text-white text-sm outline-none ml-2 w-36"
        />
      </div>

      {/* Mobile search icon */}
      <button
        onClick={() => setSearchOpen(true)}
        className="md:hidden inline-flex items-center justify-center rounded-lg bg-white/10 hover:bg-white/20 px-2.5 py-2"
        aria-label="Search"
      >
        🔎
      </button>

      {/* Mobile quick nav (toggle Home/Shop) */}
      {page === 'shop' ? (
        <button onClick={() => setPage('landing')} className="sm:hidden text-sm bg-white/10 px-3 py-1.5 rounded-lg">
          Home
        </button>
      ) : (
        <button onClick={() => setPage('shop')} className="sm:hidden text-sm bg-white/10 px-3 py-1.5 rounded-lg">
          Shop
        </button>
      )}

      {/* Cart */}
      <button
        onClick={() => setDrawerOpen(true)}
        className="relative rounded-xl bg-white/10 px-3 sm:px-4 py-1.5 sm:py-2 hover:bg-white/20 transition text-sm md:text-base"
      >
        Cart
        {cartCount > 0 && (
          <span className="absolute -top-2 -right-2 text-[10px] sm:text-xs bg-white text-[var(--primary)] font-bold rounded-full w-5 h-5 sm:w-6 sm:h-6 inline-flex items-center justify-center">
            {cartCount}
          </span>
        )}
      </button>
    </div>
  </div>
</header>

            {/* ---------- Mobile Search Overlay ---------- */}
            {searchOpen && (
              <div className="fixed inset-0 z-50 bg-black/50">
                <div className="absolute inset-x-0 top-0 bg-white rounded-b-2xl p-3">
                  <div className="flex items-center gap-2">
                    <input
                      autoFocus
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search products…"
                      className="flex-1 rounded-xl border px-3 py-2 text-sm"
                    />
                    <button
                      onClick={() => { setSearchOpen(false); setSearchQuery(""); }}
                      className="px-3 py-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-sm"
                    >
                      Cancel
                    </button>
                  </div>

                  {/* Results */}
                  <div className="mt-3 max-h-[60vh] overflow-auto divide-y">
                    {filteredProducts.length === 0 && (
                      <div className="py-6 text-center text-sm text-gray-500">No matches</div>
                    )}
                    {filteredProducts.map(p => (
                      <button
                        key={p.id}
                        onClick={() => {
                          setActiveId(p.id);
                          setPage('detail');
                          setSearchOpen(false);
                        }}
                        className="w-full flex items-center gap-3 py-3 hover:bg-gray-50 px-1 text-left"
                      >
                        <img src={p.image} alt={p.name} className="w-12 h-12 rounded-lg object-cover" />
                        <div className="flex-1 min-w-0">
                          <div className="font-medium truncate">{p.name}</div>
                          <div className="text-xs text-gray-600">{formatINR(p.price)}</div>
                        </div>
                        <span className="text-[10px] bg-[var(--accent)] text-white px-2 py-0.5 rounded">
                          -{pctOff(p.price, p.compareAt)}%
                        </span>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Drawer */}
            {drawerOpen && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setDrawerOpen(false)}></div>
                <aside className="absolute right-0 top-0 h-full w-[96%] xs:w-[92%] sm:w-[420px] bg-white shadow-2xl p-4 sm:p-5 space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-base sm:text-lg font-bold text-[var(--primary)]">Your Cart</h3>
                    <button className="text-gray-500 hover:text-black" onClick={() => setDrawerOpen(false)}>✕</button>
                  </div>

                  <div className="rounded-xl border p-3 text-xs sm:text-sm">
                    {Math.max(FREE_SHIPPING_AT - cartTotal, 0) > 0 ? (
                      <>
                        <div className="mb-2">Add {formatINR(Math.max(FREE_SHIPPING_AT - cartTotal, 0))} more for <span className="font-semibold">FREE Shipping</span></div>
                        <div className="w-full h-2 bg-gray-200 rounded">
                          <div className="h-2 bg-[var(--accent)] rounded" style={{ width: Math.min((cartTotal / 999) * 100, 100) + "%" }}></div>
                        </div>
                      </>
                    ) : (
                      <div className="text-[var(--accent)] font-medium">🎉 You unlocked FREE shipping!</div>
                    )}
                  </div>

                  <div className="space-y-3 max-h-[45vh] overflow-auto pr-1">
                    {cart.length === 0 && <div className="text-sm text-gray-500">Your cart is empty.</div>}
                    {cart.map(line => {
                      const p = CATALOG.find(x => x.id === line.id);
                      if (!p) return null;
                      return (
                        <div key={p.id} className="flex items-center gap-3 border rounded-xl p-2">
                          <img src={p.image} alt={p.name} width="64" height="64" loading="lazy" className="w-14 h-14 sm:w-16 sm:h-16 object-cover rounded-lg" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-sm sm:text-base truncate">{p.name}</div>
                            <div className="text-xs sm:text-sm">{formatINR(p.price)} ×
                              <input
                                type="number" min="0" value={line.qty}
                                onChange={(e) => {
                                  const v = parseInt(e.target.value || 0, 10);
                                  if (v <= 0) setCart(prev => prev.filter(l => l.id !== p.id));
                                  else setCart(prev => prev.map(l => l.id === p.id ? { ...l, qty: v } : l));
                                }}
                                className="w-12 sm:w-14 ml-2 border rounded px-1 py-0.5 text-center"
                              />
                            </div>
                          </div>
                          <div className="font-semibold text-sm sm:text-base">{formatINR(p.price * line.qty)}</div>
                        </div>
                      );
                    })}
                  </div>

                  <div className="flex items-center gap-2">
                    <input
                      value={coupon}
                      onChange={(e) => setCoupon(e.target.value.toUpperCase())}
                      className="flex-1 border rounded-xl px-3 py-2 text-sm"
                      placeholder="Coupon code"
                    />
                    <PrimaryBtn onClick={() => setCouponApplied(coupon.trim() === 'SMILE15')} className="text-sm">Apply</PrimaryBtn>
                  </div>
                  {couponApplied
                    ? <div className="text-sm text-[var(--accent)]">✅ Coupon applied: -{formatINR(Math.round(cartSubtotal * 0.15))}</div>
                    : <div className="text-sm text-gray-500">Tip: Use <span className="font-mono">SMILE15</span> for 15% off</div>}

                  <div className="border rounded-xl p-3 text-sm space-y-1">
                    <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                    <div className="flex justify-between"><span>Discount</span><span>-{formatINR(couponApplied ? Math.round(cartSubtotal * 0.15) : 0)}</span></div>
                    <div className="flex justify-between font-semibold"><span>Total</span><span>{formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}</span></div>
                  </div>

                  <div className="flex gap-2">
                    <PrimaryBtn
                      onClick={() => { setDrawerOpen(false); if (cart.length) setPage('address'); }}
                      className="flex-1"
                      disabled={cart.length === 0}
                    >
                      Checkout
                    </PrimaryBtn>
                  </div>
                </aside>
              </div>
            )}


            {/* Size Help Modal */}
            {sizeHelpOpen && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setSizeHelpOpen(false)}></div>
                <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[92%] max-w-md bg-white rounded-2xl shadow p-4 sm:p-6">
                  <h3 className="text-lg font-bold text-[var(--primary)] mb-1">Need help choosing a size?</h3>
                  <p className="text-sm text-gray-700 mb-3">Pick your dog’s approximate weight. We’ll show suitable products.</p>
                  <div className="grid grid-cols-1 gap-2">
                    <button onClick={() => { setSizeFilter('S'); setSizeHelpOpen(false); }} className="border rounded-xl px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Small (under 10 kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='S' /></div>
                      <div className="text-xs text-gray-600">Toy & small breeds</div>
                    </button>
                    <button onClick={() => { setSizeFilter('M'); setSizeHelpOpen(false); }} className="border rounded-xl px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Medium (10–25 kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='M' /></div>
                      <div className="text-xs text-gray-600">Beagle, Cocker, Indie (med)</div>
                    </button>
                    <button onClick={() => { setSizeFilter('L'); setSizeHelpOpen(false); }} className="border rounded-xl px-3 py-2 hover:bg-gray-50 flex items-center justify-between">
                      <div className="font-medium">Large (25+ kg)</div>
                      <div className="text-[var(--primary)]"><SizeIcon t='L' /></div>
                      <div className="text-xs text-gray-600">Labrador, GSD, Rottweiler</div>
                    </button>
                  </div>
                  <div className="mt-4 text-xs text-gray-500">Tip: You can change size later using the chips on top.</div>
                  <div className="mt-3 text-right">
                    <button onClick={() => setSizeHelpOpen(false)} className="px-3 py-1.5 rounded-lg border">Close</button>
                  </div>
                </div>
              </div>
            )}

            {/* Main content */}
            <main className="mx-auto max-w-screen-xl px-4 sm:px-6 py-6 sm:py-8 space-y-6 sm:space-y-8">
              {/* LANDING */}
              {page === "landing" && (
                <div className="space-y-8 sm:space-y-10">
                  {/* HERO with background image */}
                  <section className="relative overflow-hidden rounded-2xl shadow-soft">
                    <div className="absolute inset-0">
                      <img src="https://placedog.net/1200/700?id=128" alt="Happy dog background" className="w-full h-full object-cover" />
                      <div className="absolute inset-0 bg-gradient-to-r from-black/55 via-black/35 to-transparent"></div>
                    </div>
                    <div className="relative p-6 sm:p-10 min-h-[320px] md:min-h-[440px] flex items-center">
                      <div className="max-w-2xl text-white flex flex-col items-center text-center mx-auto sm:mx-0 sm:items-start sm:text-left">
                        <span className="inline-block bg-white/20 text-white font-medium text-xs sm:text-sm px-2 py-1 rounded mb-3">Vet Approved</span>
                        <h2 className="text-2xl sm:text-4xl md:text-5xl font-extrabold leading-tight drop-shadow">Healthy Teeth. Happy Dogs.</h2>
                        <p className="mt-2 text-sm sm:mt-3 sm:text-lg text-white/90 max-w-xs sm:max-w-md">Easy, safe dental kits loved by pets & parents.</p>

                        {/* Centered CTAs on mobile */}
                        <div className="mt-5 flex flex-wrap justify-center sm:justify-start gap-3">
                          <PrimaryBtn onClick={() => setPage('shop')}>Shop Now</PrimaryBtn>
                          {/* Secondary CTA styled for contrast on dark hero */}
                          <button onClick={() => setPage('about')}
                            className="inline-flex items-center justify-center rounded-xl px-4 py-2 font-medium border border-white/70 text-white bg-white/10 hover:bg-white/20 transition">
                            About Us
                          </button>
                        </div>
                        {/* Trust badges – compact mobile */}
                        <div className="mt-4 w-full mx-auto max-w-[420px] sm:max-w-none">
                          <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-3 place-items-center sm:place-items-stretch">

                            {/* Rating */}
                            <div className="flex items-center gap-2 bg-white/70 backdrop-blur rounded-lg px-2.5 py-1.5 shadow-sm ring-1 ring-black/10 w-[90px] sm:w-auto sm:rounded-xl sm:px-4 sm:py-3 transition transform hover:scale-[1.02] hover:shadow-md">
                              <span className="inline-flex h-5 w-5 items-center justify-center
                                              rounded-full bg-yellow-100 text-yellow-700 text-xs">★</span>
                              <span className="text-xs sm:text-sm font-medium text-gray-900">
                                4.8/5 Rating
                              </span>
                            </div>

                            {/* Delivery */}
                            <div className="flex items-center gap-2 bg-white/70 backdrop-blur rounded-lg px-2.5 py-1.5 shadow-sm ring-1 ring-black/10 w-[90px] sm:w-auto sm:rounded-xl sm:px-4 sm:py-3 transition transform hover:scale-[1.02] hover:shadow-md">
                              <span className="inline-flex h-5 w-5 items-center justify-center
                                              rounded-full bg-green-100 text-green-700 text-xs">$</span>
                              <span className="text-xs sm:text-sm font-medium text-gray-900">
                                24-hr Delivery
                              </span>
                            </div>
                          </div>
                        </div>

                      </div>
                    </div>
                  </section>

                  {/* Quick Best Seller card */}
                  <section className="bg-white rounded-2xl shadow p-4 sm:p-6">
                    <h3 className="text-lg font-bold text-[var(--primary)] mb-3">Best Seller</h3>
                    <div className="flex gap-3">
                      <img src={CATALOG[0].image} alt={CATALOG[0].name} className="w-24 h-24 rounded-xl object-cover" />
                      <div className="flex-1">
                        <div className="font-semibold">{CATALOG[0].name}</div>
                        <div className="text-sm text-gray-600 mt-1">
                          <span className="font-semibold">{formatINR(CATALOG[0].price)}</span>
                          <span className="line-through-muted ml-2">{formatINR(CATALOG[0].compareAt)}</span>
                          <span className="ml-2 text-[10px] bg-[var(--accent)] text-white px-2 py-0.5 rounded">{pctOff(CATALOG[0].price, CATALOG[0].compareAt)}% OFF</span>
                        </div>
                        <div className="mt-2 flex gap-2">
                          <PrimaryBtn onClick={() => { setPage('address'); setCart(prev => {
                            const l = prev.find(x=>x.id===CATALOG[0].id);
                            return l ? prev.map(x=>x.id===CATALOG[0].id?{...x, qty:x.qty+1}:x) : [...prev, {id: CATALOG[0].id, qty:1}];
                          }); }}>Buy Now</PrimaryBtn>
                          <OutlineBtn onClick={() => setPage('shop')}>See All</OutlineBtn>
                        </div>
                      </div>
                    </div>
                  </section>

                  {/* Features — minimal icon cards */}
                  <section className="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 reveal">
                    {[
                      { title: "Vet Recommended", icon: "🩺", desc: "Designed with vets; gentle on gums." },
                      { title: "Safe & Natural",   icon: "🌿", desc: "Food‑grade, fluoride‑free ingredients." },
                      { title: "Easy Routine",     icon: "⚡", desc: "2‑min routine, 3x/week." },
                    ].map((f) => (
                      <div key={f.title} className="bg-white rounded-2xl shadow p-4 hover:shadow-lg transition">
                        <div className="flex items-center gap-3">
                          <div className="h-10 w-10 rounded-full bg-[var(--primary)]/10 flex items-center justify-center text-lg">{f.icon}</div>
                          <div>
                            <div className="font-semibold text-base">{f.title}</div>
                            <div className="text-sm text-gray-600">{f.desc}</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </section>

                  {/* Testimonials */}
 
                  <section className="bg-white rounded-2xl shadow-soft p-4 sm:p-6">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-lg sm:text-xl font-bold text-[var(--primary)]">
                        What Pet Parents Say
                      </h3>
                      <div className="flex items-center gap-2">
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Previous"
                          onClick={prevT}
                        >
                          ‹
                        </button>
                        <button
                          className="px-3 py-1.5 rounded-lg border hover:bg-[var(--bg)]"
                          aria-label="Next"
                          onClick={nextT}
                        >
                          ›
                        </button>
                      </div>
                    </div>

                    <div className="relative overflow-hidden">
                      <div
                        className="transition-all duration-500"
                        style={{
                          transform: `translateX(-${tIndex * 100}%)`,
                          display: "grid",
                          gridTemplateColumns: `repeat(${TESTIMONIALS.length}, 100%)`,
                        }}
                      >
                        {TESTIMONIALS.map((t, idx) => (
                          <div key={idx} className="p-2">
                            {/* Google-review style with initials avatar */}
                            <div className="flex items-start gap-3 border rounded-xl p-4 bg-white shadow-sm">
                              {/* Initials avatar (two letters) */}
                              <div className="w-10 h-10 rounded-full bg-[var(--primary)] text-white flex items-center justify-center text-sm font-semibold">
                                {t.name
                                  .split(" ")
                                  .map((w) => w[0])
                                  .slice(0,1)
                                  .join("")
                                  .toUpperCase()}
                              </div>

                              <div className="flex-1">
                                {/* Reviewer name */}
                                <div className="font-semibold text-gray-900 text-sm">{t.name}</div>

                                {/* Review text */}
                                <p className="mt-1 text-gray-800 text-sm">"{t.text}"</p>

                                {/* Star rating */}
                                <div className="mt-1 flex items-center text-amber-500 text-sm leading-none">
                                  {"★".repeat(t.rating)}
                                  {Array(5 - t.rating).fill("☆")}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div className="mt-3 flex items-center justify-center gap-2">
                      {TESTIMONIALS.map((_, i) => (
                        <button
                          key={i}
                          onClick={() => setTIndex(i)}
                          className={`w-2.5 h-2.5 rounded-full ${i === tIndex ? "bg-[var(--primary)]" : "bg-gray-300"}`}
                          aria-label={`Go to slide ${i + 1}`}
                        ></button>
                      ))}
                    </div>
                  </section>
                </div>
              )}

              {/* ABOUT */}
              {page === "about" && (
                <section className="bg-white rounded-2xl shadow p-6 max-w-3xl mx-auto text-center">
                  <h2 className="text-2xl font-bold text-[var(--primary)] mb-2">Our Story</h2>
                  <p className="text-sm sm:text-base text-gray-700">We’re pet parents first. Our mission is to prevent dental disease in dogs with easy-to-use, safe, and effective kits. Every purchase supports dog shelters across India.</p>
                </section>
              )}

              {/* SHOP */}
              {page === "shop" && (
                <div>

                {/* Size selector */}
                <div className="mb-5 sm:mb-6 flex flex-wrap justify-center items-center gap-2 text-center">
                  {['ALL','S','M','L'].map(opt => (
                    <button
                      key={opt}
                      onClick={() => setSizeFilter(opt)}
                      className={
                        'px-3 py-1.5 rounded-full text-sm border shrink-0 ' +
                        (sizeFilter === opt ? 'bg-[var(--primary)] text-white border-[var(--primary)]'
                                            : 'bg-white text-[var(--primary)] border-[var(--primary)]/30')
                      }
                    >
                      <span className="inline-flex items-center gap-1">
                        {opt !== 'ALL' && (<span className="text-[var(--primary)]"><SizeIcon t={opt} /></span>)}
                        <span>{opt === 'ALL' ? 'All' : (opt === 'S' ? 'Small' : opt === 'M' ? 'Medium' : 'Large')}</span>
                      </span>
                    </button>
                  ))}
                  <button
                    onClick={() => setSizeHelpOpen(true)}
                    className="ml-1 px-3 py-1.5 rounded-full text-sm bg-white border border-gray-300 text-gray-700 shrink-0"
                  >
                    Need help with size? 🐾
                  </button>
                </div>

                <section className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4 md:gap-6">
                  {shopProducts.map(p => (
                    <div
                      key={p.id}
                      onClick={(e) => { e.stopPropagation(); setActiveId(p.id); setPage('detail'); }}
                      className="bg-white rounded-2xl shadow-md hover:shadow-xl transition p-5 cursor-pointer border border-gray-100"
                    >
                      <div className="relative">
                        <div className="rounded-xl overflow-hidden aspect-[4/3] mb-3">
                          <img src={p.image} alt={p.name} loading="lazy" className="w-full h-full object-cover product-img" />
                        </div>
                        <span className="absolute top-2 left-2 text-[10px] sm:text-xs bg-[var(--primary)] text-white px-2 py-1 rounded-lg badge badge--primary">{p.badge}</span>
                        <span className="absolute top-2 right-2 text-[10px] sm:text-xs bg-[var(--accent)] text-white px-2 py-1 rounded-lg badge badge--sale">-{pctOff(p.price, p.compareAt)}%</span>
                      </div>

                      <h3 className="font-semibold leading-tight text-base sm:text-lg clamp-1">{p.name}</h3>
                      <div className="text-sm sm:text-base text-gray-600">
                        <span className="font-semibold price-now">{formatINR(p.price)}</span>{" "}
                        <span className="line-through-muted">{formatINR(p.compareAt)}</span>
                      </div>
                      <div className="text-xs text-red-500 mt-1">Only {p.stock} left</div>
                      <div className="mt-1 text-[10px] text-gray-600">Sizes: {(p.sizes||[]).join(", ")}</div>

                      <div className="mt-3 flex gap-2">
                        <PrimaryBtn onClick={(e) => { e.stopPropagation(); addToCart(p.id); }} className="flex-1">Add to Cart</PrimaryBtn>
                      </div>
                      <PrimaryBtn onClick={(e) => { e.stopPropagation(); addToCart(p.id); setPage('address'); }} className="mt-2 w-full">Buy Now</PrimaryBtn>
                    </div>
                  ))}
                </section>
                </div>
              )}

              {/* DETAIL */}
              {page === "detail" && (
                <section className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
                  <div className="rounded-2xl overflow-hidden shadow aspect-[16/10]">
                    <img src="https://placedog.net/900/650?id=240" alt={activeProduct.name} loading="lazy" className="w-full h-full object-cover" />
                  </div>

                  <div className="bg-white rounded-2xl shadow p-4 sm:p-6">
                    <h2 className="text-xl sm:text-2xl font-bold text-[var(--primary)]">{activeProduct.name}</h2>
                    <p className="mt-2">
                      <span className="font-semibold">{formatINR(activeProduct.price)}</span>
                      <span className="line-through text-gray-400 ml-2">{formatINR(activeProduct.compareAt)}</span>
                      <span className="ml-2 text-[10px] sm:text-xs bg-[var(--accent)] text-white px-2 py-0.5 rounded">{pctOff(activeProduct.price, activeProduct.compareAt)}% OFF</span>
                    </p>
                    <p className="mt-3 text-sm sm:text-base">Everything you need to keep your dog’s teeth clean and healthy.</p>

                    <div className="mt-3 text-xs sm:text-sm text-gray-700">Good for sizes: {(activeProduct.sizes||[]).join(", ")}.
                      <button onClick={() => { setPage('shop'); setSizeFilter((activeProduct.sizes||[])[0]||'ALL'); }} className="ml-2 underline text-[var(--primary)]">See matching items</button>
                    </div>

                    <div className="mt-4 flex flex-wrap gap-2 sm:gap-3">
                      <PrimaryBtn onClick={() => addToCart(activeProduct.id)}>Add to Cart</PrimaryBtn>
                      <PrimaryBtn onClick={() => { addToCart(activeProduct.id); setPage('address'); }}>Buy Now</PrimaryBtn>
                    </div>

                    <div className="mt-6 grid grid-cols-3 text-xs sm:text-sm">
                      <div className="border-b-2 border-[var(--primary)] pb-2 font-semibold">Description</div>
                      <div className="border-b pb-2 text-gray-500">Ingredients</div>
                      <div className="border-b pb-2 text-gray-500">Reviews</div>
                    </div>
                    <p className="mt-3 text-xs sm:text-sm">Starter kit with brush, gel, and tutorial. Gentle on gums, effective on plaque.</p>
                  </div>
                </section>
              )}

              {/* ADDRESS */}
              {page === "address" && (
                <section className="max-w-md w-full mx-auto bg-white rounded-2xl shadow p-4 sm:p-6">
                  <h2 className="text-lg sm:text-xl font-bold text-[var(--primary)]">Delivery Details</h2>
                  <div className="text-xs mt-1 text-gray-600">Tip: Add more items and apply SMILE15 at checkout to save more.</div>
                  <div className="mt-4 space-y-3">
                    <input className="w-full rounded-xl border px-3 py-2 text-sm sm:text-base" placeholder="Full Name" />
                    <input className="w-full rounded-xl border px-3 py-2 text-sm sm:text-base" placeholder="Mobile Number" />
                    <input className="w-full rounded-xl border px-3 py-2 text-sm sm:text-base" placeholder="Address" />
                    <div className="grid grid-cols-2 gap-3">
                      <input className="rounded-xl border px-3 py-2 text-sm sm:text-base" placeholder="City" />
                      <input className="rounded-xl border px-3 py-2 text-sm sm:text-base" placeholder="Pin Code" />
                    </div>
                    <div className="border rounded-xl p-3 text-sm space-y-1">
                      <div className="flex justify-between"><span>Items</span><span>{cartCount}</span></div>
                      <div className="flex justify-between"><span>Subtotal</span><span>{formatINR(cartSubtotal)}</span></div>
                      <div className="flex justify-between"><span>Discount (if coupon)</span><span>-{formatINR(couponApplied ? Math.round(cartSubtotal * 0.15) : 0)}</span></div>
                      <div className="flex justify-between font-semibold"><span>To Pay</span><span>{formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}</span></div>
                    </div>
                    <PrimaryBtn onClick={() => setPage('payment')}>Proceed to Payment</PrimaryBtn>
                  </div>
                </section>
              )}

              {/* PAYMENT */}
              {page === "payment" && (
                <section className="max-w-md w-full mx-auto bg-white rounded-2xl shadow p-4 sm:p-6">
                  <div className="mb-4 text-xs sm:text-sm"><span className="font-medium">Address</span> → <span className="font-bold text-[var(--primary)]">Payment</span> → <span className="text-gray-400">Thank You</span></div>
                  <div className="rounded-xl overflow-hidden aspect-[5/2] mb-3">
                    <img src="https://placedog.net/500/200?id=260" alt="Payment visual" loading="lazy" className="w-full h-full object-cover" />
                  </div>
                  <p className="mb-2">Order Total: <span className="font-semibold">{formatINR(Math.max(cartSubtotal - (couponApplied ? Math.round(cartSubtotal * 0.15) : 0), 0))}</span></p>
                  <p className="mb-4 text-sm text-gray-600">Pay via UPI, Cards, NetBanking, or Cash on Delivery.</p>
                  <PrimaryBtn
                    onClick={() => {
                      // Clear cart on successful purchase
                      setCart([]);
                      setCouponApplied(false);
                      setPage('thankyou');
                    }}
                  >
                    Pay Now
                  </PrimaryBtn>
                </section>
              )}

              {/* THANK YOU */}
              {page === "thankyou" && (
                <section className="text-center bg-white rounded-2xl shadow p-6 sm:p-8 max-w-lg w-full mx-auto">
                  <div className="rounded-XL overflow-hidden aspect-[25/17] mb-4">
                    <img src="https://placedog.net/500/340?id=280" alt="Thank you dog" loading="lazy" className="w-full h-full object-cover" />
                  </div>
                  <h2 className="text-xl sm:text-2xl font-bold text-[var(--accent)]">Thank You!</h2>
                  <p className="mt-2">Your order has been placed successfully.</p>
                  <p className="text-sm mt-2">Estimated delivery: 3–5 days</p>
                  <div className="mt-4"><OutlineBtn onClick={() => setPage('landing')}>Back to Home</OutlineBtn></div>
                </section>
              )}
            </main>

            {/* Sticky CTA (mobile only, Home page only) */}
            {page === "landing" && !drawerOpen && (
              <div className="fixed bottom-3 inset-x-3 sm:hidden z-40">
                <button
                  onClick={() => setPage('shop')}
                  className="w-full rounded-xl py-3 text-white bg-[var(--accent)] shadow-lg"
                >
                  Shop Now
                </button>
              </div>
            )}
          </div>
        );
      }

      // Mount React app
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<App />);
    </script>
  </body>
</html>
